{
  "/": {
    "title": "🎼 Welcome!",
    "content": "\r\nMy name is Houston Haynes and I've been doing \"full stack\" hardware and software engineering for a while now. I'm also a conservatory trained composer, so the pun \"F# Notes\" seemed to balance the nerd qualities of those two spheres. 🎵 😄 📐 If you're like me and have written code in many languages for many environments, the cognitive burden of that work can seem daunting. With F# [I've found \"a home\"](perspectives/WTFSIN_1) that lets me bring a new level of focus and productivity across a variety of targets. This site is the latest phase of work in fitting as much of those domains \"into my head\" as I can - and, where needed, offload bits of information for reference, review and later retrieval as I \"switch gears\" into new engineering challenges that F# so aptly addresses.\r\n\r\nWhile this site is based on Hugo and markdown, I'm also using the Obsidian note-taking app and the [zettelkasten](https://zettelkasten.de/) method to organize my thoughts. For those that already know about note-taking apps as \"a second brain\" this will come as no surprise. 🧠\r\n\r\n![F# Emblem](/img/svg/F_Sharp_logo.svg)\r\n\r\n## What is The Purpose of this Site?\r\n\r\n This is a clearinghouse for short-form and long-form notes that journal my personal path to deeper understanding of F#. Because of the incredible \"reach\" of F# - into front end, back end, machine learning and even Internet-of-Things, as well as its expansive capabilities as a *meta-language*, this site will have an increasing span as time marches on. In the early stages I'll be focusing on \"core\" F# idioms. But  subjects will eventually 'fan out' - starting with digressions to outline C# interop, as many of my current projects cross into that domain.\r\n\r\n And similarly, I will eventually delve into the [Fable](https://fable.io) compiler, which adds dimensions to F# outside of and alongside the .NET sphere. The engineering circles which currently leverage the power of Fable understand it's amazing capabilities. Outside of those working groups, however, it's *still* a relative unknown. The fact that F# can compile to several other languages, starting with JavaScript, it flexes a __real__ super-power through its ability to provide type safety, performance, flexibility and __reach__ far beyond the .NET ecosystem.\r\n\r\n## 'Tis The Gift To Be Simple 🎶\r\n\r\n (🎩 Hat tip to [Aaron Copland](https://www.youtube.com/watch?reload=9\u0026v=JI6RYZygevA)) I'm not exactly certain how much of the \"raw form\" of zettels will actually show up here. I have a backlog of subjects I want to write about, but I'm also continuing practicing and learning new techniques every day. One of the aspects of this process that really rings true for me with the zettelkasten method is the ability to bring ideas together and allow them to coalesce in sometimes surprising ways. It *also* has some elements of a compositional approach to software engineering, something I'll be writing about more throughout the site. So while I want to avoid *over*-planning, my backlog of projects and subjects I want to note for my *future* self is not trivial. 🫰 The end goal is to leave room for this site grow and foster an emergence of ideas - which could will likely lead to soliciting feedback from the community and perhaps include direct contributions, if that interest emerges.\r\n\r\n## A Semblance of Direction\r\n\r\n\u003e 📚 __Short Form Scatter:__ zettels (notes) will pop up as I stumble across new ideas while researching specific projects. I'm still working out how those pieces work together, but I'm really glad to have the interactive graph as a resource. I think it will be key to unlocking the power of bringing together (seemingly) \"atomic\" concepts into fresh ideas. 💡\r\n\r\n\u003e ✏️ __Emergent Structure:__ As zettels \"mature\" and gain more salience to on-going study, they'll eventually merge into longer-form blog entries. This might be a little bit different from more \"strict\" zettelkasten vaults, where keeping notes small and focused is a more constrained, nearly dogmatic practice. This site will likely show a continuum from those points of information to longer-form *think pieces*. 🚧 🤔 🏗️\r\n\r\n\u003e 🔗 __Highly referenced:__ This starts with helping *myself* keep up with reminders of resources, in many cases to web resources, but also in some cases to hard copy texts I keep on hand. I'll try to provide links to primary sources where possible. 🔖\r\n\r\n\u003e ⚙️ __Working examples:__ One of the things I envision is a way to *directly* exercise bits of code in the browser where possible. I'm not precisely sure how to do this now, but it *may* end up being one of the projects I list on this site. With [\"Try F#\"](https://try.fsharp.org) and [Fable's online REPL](https://fable.io/repl/) both available online, I have to imagine that this should be a viable avenue to explore in phases. 🛠️\r\n\r\n\u003e 🕸️ __Interactive Graph:__ Probably the most 👀 eye-catching element of this site is the Interactive Graph available on most pages. This uses frontmatter and other page references to link pages together in a dynamic graph. The [Hugo Obsidian](https://github.com/jackyzha0/hugo-obsidian) project makes this possible, and I'm still getting my head wrapped around how it works. I expect that will start to grow significantly as the zettelkasten and longer-form \"perspective\" pages start to intersect. I'm really digging this Go-implemented tool, and may end up inspiring me to add another project. 😏👍\r\n\r\n\u003e 🌐 __Projects:__ Beyond note-taking and the occasional think piece there will also be more structured project-specific folders and pages where I'll keep track of progress and document various sidebars and digressions. I'm hoping to bring in Obsidian calendars and other plugins, but that will largely depend on whether those community plugins render their output to markdown. 📆\r\n\r\n## A Paved Path 🛣️\r\n\r\n While this is about my own *second brain* hopefully this will also serve to help others in finding their own way to the variety of resources available in this incredible ecosystem. For those that have recently discovered the treasure trove of open-source resources available to them in the F# world 🗺️ it can seem a bit daunting. So aside from code samples and chatter of that sort I'll park references and \"pointers\" to other locations around the web, which is part of the super-power of \"second brain\" applications like these. I'm looking forward to making use of these tools, and sharing my journey along they way! 🚵",
    "lastmodified": "2023-08-21T22:33:38.4992716-04:00",
    "tags": []
  },
  "/amethyst/": {
    "title": "Amethyst Notes",
    "content": "",
    "lastmodified": "2023-08-21T16:38:39.6411429-04:00",
    "tags": []
  },
  "/amethyst/example/": {
    "title": "Example Site",
    "content": "\r\n# Introduction\r\n\r\n## Ferre hinnitibus erat accipitrem dixi Troiae tollens\r\n\r\nLorem markdownum, a quoque nutu est *quodcumque mandasset* veluti. Passim\r\ninportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet\r\nnon, mortali undas. Omnis pharetramque gramen portentificisque membris servatum\r\nnovabis fallit de nubibus atque silvas mihi. **Dixit repetitaque Quid**; verrit\r\nlonga; sententia [mandat](http://pastor-ad.io/questussilvas) quascumque nescio\r\nsolebat [litore](http://lacrimas-ab.net/); noctes. *Hostem haerentem* circuit\r\n[plenaque tamen](http://www.sine.io/in).\r\n\r\n- Pedum ne indigenae finire invergens carpebat\r\n- Velit posses summoque\r\n- De fumos illa foret\r\n\r\n## Est simul fameque tauri qua ad\r\n\r\nLocum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem\r\nArgolicas gener.\r\n\r\n## Me sol\r\n\r\nNec dis certa fuit socer, Nonacria **dies** manet tacitaque sibi? Sucis est\r\niactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos\r\nvittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea\r\ncadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis\r\n[progenies](http://www.late.net/alimentavirides) nuribus rustica tinguet. Pater\r\nomnes liquido creditis noctem.\r\n\r\n    if (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue,\r\n            viralItunesBalancing, bankruptcy_file_pptp)) {\r\n        file += ip_cybercrime_suffix;\r\n    }\r\n    if (runtimeSmartRom == netMarketingWord) {\r\n        virusBalancingWin *= scriptPromptBespoke + raster(post_drive,\r\n                windowsSli);\r\n        cd = address_hertz_trojan;\r\n        soap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui);\r\n    } else {\r\n        megabyte.api = modem_flowchart - web + syntaxHalftoneAddress;\r\n    }\r\n    if (3 \u003c mebibyteNetworkAnimated) {\r\n        pharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle(\r\n                dvrSyntax, cdma);\r\n        adf_sla *= hoverCropDrive;\r\n        templateNtfs = -1 - vertical;\r\n    } else {\r\n        expressionCompressionVariable.bootMulti = white_eup_javascript(\r\n                table_suffix);\r\n        guidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1,\r\n                managementRosetta(webcamActivex), 740874);\r\n    }\r\n    var virusTweetSsl = nullGigo;\r\n\r\n## Trepident sitimque\r\n\r\nSentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis\r\nmediis; dolor? Vidit imi **Aeacon** perfida propositos adde, tua Somni Fluctibus\r\nerrante lustrat non.\r\n\r\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec\r\nficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc\r\ncrescendo vigor ululasse vertice *exspatiantur* celer tepidique petita aversata\r\noculis iussa est me ferro.\r\n",
    "lastmodified": "2023-08-20T18:24:57.0757096-04:00",
    "tags": []
  },
  "/amethyst/example/collapsed/": {
    "title": "_index",
    "content": "\r\nHello World",
    "lastmodified": "2023-08-20T18:24:57.0787073-04:00",
    "tags": []
  },
  "/amethyst/example/collapsed/3rd-level/": {
    "title": "_index",
    "content": "# 3rd Level of Menu\r\n\r\nNefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae\r\nmiror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me\r\nante aliquid, aura inponere candidioribus quidque accendit bella, sumpta.\r\nIntravit quam erat figentem hunc, motus de fontes parvo tempestate.\r\n\r\n```c\r\n    iscsi_virus = pitch(json_in_on(eupViral),\r\n            northbridge_services_troubleshooting, personal(\r\n            firmware_rw.trash_rw_crm.device(interactive_gopher_personal,\r\n            software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel,\r\n            mips_whitelist_duplex, cpa)));\r\n    if (5) {\r\n        managementNetwork += dma - boolean;\r\n        kilohertz_token = 2;\r\n        honeypot_affiliate_ergonomics = fiber;\r\n    }\r\n    mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet(\r\n            analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet),\r\n            gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork,\r\n            trim_duplex_file), cellTapeDirect, token_tooltip_mashup(\r\n            ripcordingMashup)));\r\n    module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) +\r\n            coreLog.joystick(componentUdpLink), windows_expansion_touchscreen);\r\n    bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling(\r\n            ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);\r\n```",
    "lastmodified": "2023-08-20T18:24:57.0777063-04:00",
    "tags": []
  },
  "/amethyst/example/collapsed/3rd-level/4th-level": {
    "title": "4th-level",
    "content": "# 4th Level of Menu\r\n\r\n## Caesorum illa tu sentit micat vestes papyriferi\r\n\r\nInde aderam facti; Theseus vis de tauri illa peream. Oculos **uberaque** non\r\nregisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo;\r\ngestanda nitidi, vero? Dum ne pectoraque testantur.\r\n\r\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, [aut\r\nmanes](http://www.creveratnon.net/apricaaetheriis), Assyrii. Cupiens auctoribus\r\npariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae\r\niusto! Sedes ante dum superest **extrema**.\r\n",
    "lastmodified": "2023-08-20T18:24:57.0767093-04:00",
    "tags": []
  },
  "/amethyst/example/hidden": {
    "title": "hidden",
    "content": "\r\n# This page is hidden in menu\r\n\r\n# Quondam non pater est dignior ille Eurotas\r\n\r\n## Latent te facies\r\n\r\nLorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus,\r\nfrementes, qui in vel. Hippotades Peleus [pennas\r\nconscia](http://gratia.net/tot-qua.php) cuiquam Caeneus quas.\r\n\r\n- Pater demittere evincitque reddunt\r\n- Maxime adhuc pressit huc Danaas quid freta\r\n- Soror ego\r\n- Luctus linguam saxa ultroque prior Tatiumque inquit\r\n- Saepe liquitur subita superata dederat Anius sudor\r\n\r\n## Cum honorum Latona\r\n\r\nO fallor [in sustinui\r\niussorum](http://www.spectataharundine.org/aquas-relinquit.html) equidem.\r\nNymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima\r\niamdudum maius?\r\n\r\n    reality(burnDocking(apache_nanometer),\r\n            pad.property_data_programming.sectorBrowserPpga(dataMask, 37,\r\n            recycleRup));\r\n    intellectualVaporwareUser += -5 * 4;\r\n    traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp));\r\n    surge_host_golden = mca_compact_device(dual_dpi_opengl, 33,\r\n            commerce_add_ppc);\r\n    if (lun_ipv) {\r\n        verticalExtranet(1, thumbnail_ttl, 3);\r\n        bar_graphics_jpeg(chipset - sector_xmp_beta);\r\n    }\r\n\r\n## Fronde cetera dextrae sequens pennis voce muneris\r\n\r\nActa cretus diem restet utque; move integer, oscula non inspirat, noctisque\r\nscelus! Nantemque in suas vobis quamvis, et labori!\r\n\r\n    var runtimeDiskCompiler = home - array_ad_software;\r\n    if (internic \u003e disk) {\r\n        emoticonLockCron += 37 + bps - 4;\r\n        wan_ansi_honeypot.cardGigaflops = artificialStorageCgi;\r\n        simplex -= downloadAccess;\r\n    }\r\n    var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount;\r\n    sector(memory(firewire + interlaced, wired));",
    "lastmodified": "2023-08-20T18:24:57.0787073-04:00",
    "tags": []
  },
  "/amethyst/example/table-of-contents/": {
    "title": "Table of Contents",
    "content": "\r\n# Ubi loqui\r\n\r\n## Mentem genus facietque salire tempus bracchia\r\n\r\nLorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem\r\nnec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis\r\nsubdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit,\r\nsuo quisque linguae medentes fixo: tum petis.\r\n\r\n## Rapit vocant si hunc siste adspice\r\n\r\nOra precari Patraeque Neptunia, dixit Danae [Cithaeron\r\narmaque](http://mersis-an.org/litoristum) maxima in **nati Coniugis** templis\r\nfluidove. Effugit usus nec ingreditur agmen *ac manus* conlato. Nullis vagis\r\nnequiquam vultibus aliquos altera *suum venis* teneas fretum. Armos [remotis\r\nhoc](http://tutum.io/me) sine ferrea iuncta quam!\r\n\r\n## Locus fuit caecis\r\n\r\nNefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae\r\nmiror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me\r\nante aliquid, aura inponere candidioribus quidque accendit bella, sumpta.\r\nIntravit quam erat figentem hunc, motus de fontes parvo tempestate.\r\n\r\n    iscsi_virus = pitch(json_in_on(eupViral),\r\n            northbridge_services_troubleshooting, personal(\r\n            firmware_rw.trash_rw_crm.device(interactive_gopher_personal,\r\n            software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel,\r\n            mips_whitelist_duplex, cpa)));\r\n    if (5) {\r\n        managementNetwork += dma - boolean;\r\n        kilohertz_token = 2;\r\n        honeypot_affiliate_ergonomics = fiber;\r\n    }\r\n    mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet(\r\n            analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet),\r\n            gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork,\r\n            trim_duplex_file), cellTapeDirect, token_tooltip_mashup(\r\n            ripcordingMashup)));\r\n    module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) +\r\n            coreLog.joystick(componentUdpLink), windows_expansion_touchscreen);\r\n    bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling(\r\n            ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);\r\n\r\n## Placabilis coactis nega ingemuit ignoscat nimia non\r\n\r\nFrontis turba. Oculi gravis est Delphice; *inque praedaque* sanguine manu non.\r\n\r\n    if (ad_api) {\r\n        zif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive;\r\n        gigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop),\r\n                panel_point_firmware);\r\n        spyware_bash.statePopApplet = express_netbios_digital(\r\n                insertion_troubleshooting.brouter(recordFolderUs), 65);\r\n    }\r\n    recursionCoreRay = -5;\r\n    if (hub == non) {\r\n        portBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard),\r\n                font_radcab, guidCmsScalable + reciprocalMatrixPim);\r\n        left.bug = screenshot;\r\n    } else {\r\n        tooltipOpacity = raw_process_permalink(webcamFontUser, -1);\r\n        executable_router += tape;\r\n    }\r\n    if (tft) {\r\n        bandwidthWeb *= social_page;\r\n    } else {\r\n        regular += 611883;\r\n        thumbnail /= system_lag_keyboard;\r\n    }\r\n\r\n## Caesorum illa tu sentit micat vestes papyriferi\r\n\r\nInde aderam facti; Theseus vis de tauri illa peream. Oculos **uberaque** non\r\nregisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo;\r\ngestanda nitidi, vero? Dum ne pectoraque testantur.\r\n\r\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, [aut\r\nmanes](http://www.creveratnon.net/apricaaetheriis), Assyrii. Cupiens auctoribus\r\npariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae\r\niusto! Sedes ante dum superest **extrema**.\r\n",
    "lastmodified": "2023-08-20T18:24:57.0797091-04:00",
    "tags": []
  },
  "/amethyst/example/table-of-contents/with-toc": {
    "title": "With ToC",
    "content": "# Caput vino delphine in tamen vias\r\n\r\n## Cognita laeva illo fracta\r\n\r\nLorem markdownum pavent auras, surgit nunc cingentibus libet **Laomedonque que**\r\nest. Pastor [An](http://est.org/ire.aspx) arbor filia foedat, ne [fugit\r\naliter](http://www.indiciumturbam.org/moramquid.php), per. Helicona illas et\r\ncallida neptem est *Oresitrophos* caput, dentibus est venit. Tenet reddite\r\n[famuli](http://www.antro-et.net/) praesentem fortibus, quaeque vis foret si\r\nfrondes *gelidos* gravidae circumtulit [inpulit armenta\r\nnativum](http://incurvasustulit.io/illi-virtute.html).\r\n\r\n1. Te at cruciabere vides rubentis manebo\r\n2. Maturuit in praetemptat ruborem ignara postquam habitasse\r\n3. Subitarum supplevit quoque fontesque venabula spretis modo\r\n4. Montis tot est mali quasque gravis\r\n5. Quinquennem domus arsit ipse\r\n6. Pellem turis pugnabant locavit\r\n\r\n## Natus quaerere\r\n\r\nPectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra\r\nPeneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera\r\nexcutiunt concipit.\r\n\r\n\u003e Phrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem.\r\n\u003e Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae\r\n\u003e generis? *Agnus* dabat et ignotis dextera, sic tibi pacis **feriente at mora**\r\n\u003e euhoeque *comites hostem* vestras Phineus. Vultuque sanguine dominoque [metuit\r\n\u003e risi](http://iuvat.org/eundem.php) fama vergit summaque meus clarissimus\r\n\u003e artesque tinguebat successor nominis cervice caelicolae.\r\n\r\n## Limitibus misere sit\r\n\r\nAurea non fata repertis praerupit feruntur simul, meae hosti lentaque *citius\r\nlevibus*, cum sede dixit, Phaethon texta. *Albentibus summos* multifidasque\r\niungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi\r\nperlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra\r\nipsum **est**. Reseret nec; saeva suo passu debentia linguam terga et aures et\r\ncervix [de](http://www.amnem.io/pervenit.aspx) ubera. Coercet gelidumque manus,\r\ndoluit volvitur induta?\r\n\r\n## Enim sua\r\n\r\nIuvenilior filia inlustre templa quidem herbis permittat trahens huic. In\r\ncruribus proceres sole crescitque *fata*, quos quos; merui maris se non tamen\r\nin, mea.\r\n\r\n## Germana aves pignus tecta\r\n\r\nMortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec,\r\naris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu\r\noccupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque\r\npotest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur\r\nLeucothoen obitum?\r\n\r\nPostibus mittam est *nubibus principium pluma*, exsecratur facta et. Iunge\r\nMnemonidas pallamque pars; vere restitit alis flumina quae **quoque**, est\r\nignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes\r\nnullaque!\r\n",
    "lastmodified": "2023-08-20T18:24:57.0797091-04:00",
    "tags": []
  },
  "/amethyst/example/table-of-contents/without-toc": {
    "title": "Without ToC",
    "content": "\r\n# At me ipso nepotibus nunc celebratior genus\r\n\r\n## Tanto oblite\r\n\r\nLorem markdownum pectora novis patenti igne sua opus aurae feras materiaque\r\nillic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro\r\nclara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens\r\nvincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat\r\nadmonitu concidit, ad resimas vultus et rugas vultu **dignamque** Siphnon.\r\n\r\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt\r\ndixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor\r\nmanibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon\r\ncrate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo\r\nperque, fugisse pectora sorores.\r\n\r\n## Summe promissa supple vadit lenius\r\n\r\nQuibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis\r\nnec Caeneus exululat inclite corpus est, ire **tibi** ostendens et tibi. Rigent\r\net vires dique possent lumina; **eadem** dixit poma funeribus paret et felix\r\nreddebant ventis utile lignum.\r\n\r\n1. Remansit notam Stygia feroxque\r\n2. Et dabit materna\r\n3. Vipereas Phrygiaeque umbram sollicito cruore conlucere suus\r\n4. Quarum Elis corniger\r\n5. Nec ieiunia dixit\r\n\r\nVertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris\r\nspatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum\r\nnimium rima.\r\n\r\n## Quidem resupinus inducto solebat una facinus quae\r\n\r\nCredulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur,\r\nquin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit,\r\ninvergens, nymphae mutat fessas ait finge.\r\n\r\n1. Baculum mandataque ne addere capiti violentior\r\n2. Altera duas quam hoc ille tenues inquit\r\n3. Sicula sidereus latrantis domoque ratae polluit comites\r\n4. Possit oro clausura namque se nunc iuvenisque\r\n5. Faciem posuit\r\n6. Quodque cum ponunt novercae nata vestrae aratra\r\n\r\nIte extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide\r\nquos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus\r\nfulmen dubius, saxa caelum effuge extremis fixum tumor adfecit **bella**,\r\npotentes? Dum nec insidiosa tempora tegit\r\n[spirarunt](http://mihiferre.net/iuvenes-peto.html). Per lupi pars foliis,\r\nporreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine:\r\nferrum idem Orion caelum heres gerebat fixis?\r\n",
    "lastmodified": "2023-08-20T18:24:57.0807057-04:00",
    "tags": []
  },
  "/amethyst/features/": {
    "title": "_index",
    "content": "",
    "lastmodified": "2023-08-20T18:24:57.0817058-04:00",
    "tags": []
  },
  "/amethyst/features/buttons": {
    "title": "buttons",
    "content": "# Buttons\r\n\r\nButtons are styled links that can lead to local page or external link.\r\n\r\n## Example\r\n\r\n```tpl\r\n{{\u003c/* button relref=\"/\" [class=\"...\"] */\u003e}}Get Home{{\u003c/* /button */\u003e}}\r\n{{\u003c/* button href=\"https://github.com/alex-shpak/hugo-book\" */\u003e}}Contribute{{\u003c/* /button */\u003e}}\r\n```\r\n\r\n{{\u003c button relref=\"/\" \u003e}}Get Home{{\u003c /button \u003e}}\r\n{{\u003c button href=\"https://github.com/alex-shpak/hugo-book\" \u003e}}Contribute{{\u003c /button \u003e}}\r\n",
    "lastmodified": "2023-08-20T18:24:57.0817058-04:00",
    "tags": []
  },
  "/amethyst/features/callouts": {
    "title": "Callouts",
    "content": "\r\n## Callout support\r\n\r\nAmethyst supports the same Admonition-callout syntax as Obsidian.\r\n\r\nThis includes\r\n- 12 Distinct callout types (each with several aliases)\r\n- Collapsable callouts\r\n\r\nSee [documentation on supported types and syntax here](https://help.obsidian.md/How+to/Use+callouts#Types).\r\n\r\n## Showcase\r\n\r\n\u003e [!EXAMPLE] Examples\r\n\u003e\r\n\u003e Aliases: example\r\n\r\n\u003e [!note] Notes\r\n\u003e\r\n\u003e Aliases: note\r\n\r\n\u003e [!abstract] Summaries \r\n\u003e\r\n\u003e Aliases: abstract, summary, tldr\r\n\r\n\u003e [!info] Info \r\n\u003e\r\n\u003e Aliases: info, todo\r\n\r\n\u003e [!tip] Hint \r\n\u003e\r\n\u003e Aliases: tip, hint, important\r\n\r\n\u003e [!success] Success \r\n\u003e\r\n\u003e Aliases: success, check, done\r\n\r\n\u003e [!question] Question \r\n\u003e\r\n\u003e Aliases: question, help, faq\r\n\r\n\u003e [!warning] Warning \r\n\u003e\r\n\u003e Aliases: warning, caution, attention\r\n\r\n\u003e [!failure] Failure \r\n\u003e\r\n\u003e Aliases: failure, fail, missing\r\n\r\n\u003e [!danger] Error\r\n\u003e\r\n\u003e Aliases: danger, error\r\n\r\n\u003e [!bug] Bug\r\n\u003e\r\n\u003e Aliases: bug\r\n\r\n\u003e [!quote] Quote\r\n\u003e\r\n\u003e Aliases: quote, cite\r\n",
    "lastmodified": "2023-08-20T18:24:57.0817058-04:00",
    "tags": []
  },
  "/amethyst/features/columns": {
    "title": "columns",
    "content": "# Columns\r\n\r\nColumns help organize shorter pieces of content horizontally for readability.\r\n\r\n\r\n```html\r\n{{\u003c/* columns */\u003e}} \u003c!-- begin columns block --\u003e\r\n# Left Content\r\nLorem markdownum insigne...\r\n\r\n\u003c---\u003e \u003c!-- magic separator, between columns --\u003e\r\n\r\n# Mid Content\r\nLorem markdownum insigne...\r\n\r\n\u003c---\u003e \u003c!-- magic separator, between columns --\u003e\r\n\r\n# Right Content\r\nLorem markdownum insigne...\r\n{{\u003c/* /columns */\u003e}}\r\n```\r\n\r\n## Example\r\n\r\n{{\u003c columns \u003e}}\r\n## Left Content\r\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat\r\nstringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\r\nprotulit, sed sed aere valvis inhaesuro Pallas animam: qui _quid_, ignes.\r\nMiseratus fonte Ditis conubia.\r\n\r\n\u003c---\u003e\r\n\r\n## Mid Content\r\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat\r\nstringit, frustra Saturnius uteroque inter!\r\n\r\n\u003c---\u003e\r\n\r\n## Right Content\r\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat\r\nstringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\r\nprotulit, sed sed aere valvis inhaesuro Pallas animam: qui _quid_, ignes.\r\nMiseratus fonte Ditis conubia.\r\n{{\u003c /columns \u003e}}\r\n",
    "lastmodified": "2023-08-20T18:24:57.0827104-04:00",
    "tags": []
  },
  "/amethyst/features/details": {
    "title": "details",
    "content": "# Details\r\n\r\nDetails shortcode is a helper for `details` html5 element. It is going to replace `expand` shortcode.\r\n\r\n## Example\r\n```tpl\r\n{{\u003c/* details \"Title\" [open] */\u003e}}\r\n## Markdown content\r\nLorem markdownum insigne...\r\n{{\u003c/* /details */\u003e}}\r\n```\r\n```tpl\r\n{{\u003c/* details title=\"Title\" open=true */\u003e}}\r\n## Markdown content\r\nLorem markdownum insigne...\r\n{{\u003c/* /details */\u003e}}\r\n```\r\n\r\n{{\u003c details \"Title\" open \u003e}}\r\n## Markdown content\r\nLorem markdownum insigne...\r\n{{\u003c /details \u003e}}\r\n",
    "lastmodified": "2023-08-20T18:24:57.0827104-04:00",
    "tags": []
  },
  "/amethyst/features/expand": {
    "title": "expand",
    "content": "# Expand\r\n\r\nExpand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\r\n\r\n## Example\r\n### Default\r\n\r\n```tpl\r\n{{\u003c/* expand */\u003e}}\r\n## Markdown content\r\nLorem markdownum insigne...\r\n{{\u003c/* /expand */\u003e}}\r\n```\r\n\r\n{{\u003c expand \u003e}}\r\n## Markdown content\r\nLorem markdownum insigne...\r\n{{\u003c /expand \u003e}}\r\n\r\n### With Custom Label\r\n\r\n```tpl\r\n{{\u003c/* expand \"Custom Label\" \"...\" */\u003e}}\r\n## Markdown content\r\nLorem markdownum insigne...\r\n{{\u003c/* /expand */\u003e}}\r\n```\r\n\r\n{{\u003c expand \"Custom Label\" \"...\" \u003e}}\r\n## Markdown content\r\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat\r\nstringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\r\nprotulit, sed sed aere valvis inhaesuro Pallas animam: qui _quid_, ignes.\r\nMiseratus fonte Ditis conubia.\r\n{{\u003c /expand \u003e}}\r\n",
    "lastmodified": "2023-08-20T18:24:57.0837077-04:00",
    "tags": []
  },
  "/amethyst/features/languages": {
    "title": "Chinese, Japanese, Korean Support (测试)",
    "content": "\r\n## Chinese, Japanese, Korean Support\r\n几乎在我们意识到之前，我们已经离开了地面。\r\n\r\n우리가 그것을 알기도 전에 우리는 땅을 떠났습니다.\r\n\r\n私たちがそれを知るほぼ前に、私たちは地面を離れていました。\r\n\r\n## RTL\r\nMore information on configuring RTL languages like Arabic in the [config](/amethyst/setup/config.md) page.\r\n",
    "lastmodified": "2023-08-21T16:50:49.2155076-04:00",
    "tags": []
  },
  "/amethyst/features/latex": {
    "title": "LaTeX",
    "content": "\r\nBlock math works with two dollar signs `$$...$$`\r\n\r\n$$f(x) = \\int_{-\\infty}^\\infty\r\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\r\n    \\,d\\xi$$\r\n\t\r\nInline math also works with single dollar signs `$...$`. For example, Euler's identity but inline: $e^{i\\pi} = -1$\r\n\r\nAligned equations work quite well:\r\n\r\n$$\r\n\\begin{aligned}\r\na \u0026= b + c \\\\ \u0026= e + f \\\\\r\n\\end{aligned}\r\n$$\r\n\r\nAnd matrices\r\n\r\n$$\r\n\\begin{bmatrix}\r\n1 \u0026 2 \u0026 3 \\\\\r\na \u0026 b \u0026 c\r\n\\end{bmatrix}\r\n$$",
    "lastmodified": "2023-08-20T18:24:57.0847076-04:00",
    "tags": []
  },
  "/amethyst/features/mermaid": {
    "title": "mermaid",
    "content": "# Mermaid Chart\r\n\r\n[MermaidJS](https://mermaid-js.github.io/) is library for generating svg charts and diagrams from text.\r\n\r\n{{\u003c hint info \u003e}}\r\n**Override Mermaid Initialization Config**\r\n\r\nTo override the [initialization config](https://mermaid-js.github.io/mermaid/#/Setup) for Mermaid,\r\ncreate a `mermaid.json` file in your `assets` folder!\r\n{{\u003c /hint \u003e}}\r\n\r\n## Example\r\n\r\n{{\u003c columns \u003e}}\r\n```tpl\r\n{{\u003c/*/* mermaid [class=\"text-center\"]*/*/\u003e}}\r\nstateDiagram-v2\r\n    State1: The state with a note\r\n    note right of State1\r\n        Important information! You can write\r\n        notes.\r\n    end note\r\n    State1 --\u003e State2\r\n    note left of State2 : This is the note to the left.\r\n{{\u003c/*/* /mermaid */*/\u003e}}\r\n```\r\n\r\n\u003c---\u003e\r\n\r\n{{\u003c mermaid \u003e}}\r\nstateDiagram-v2\r\n    State1: The state with a note\r\n    note right of State1\r\n        Important information! You can write\r\n        notes.\r\n    end note\r\n    State1 --\u003e State2\r\n    note left of State2 : This is the note to the left.\r\n{{\u003c /mermaid \u003e}}\r\n\r\n{{\u003c /columns \u003e}}\r\n",
    "lastmodified": "2023-08-20T18:24:57.0847076-04:00",
    "tags": []
  },
  "/amethyst/features/section/": {
    "title": "_index",
    "content": "\r\n# Section\r\n\r\nSection renders pages in section as definition list, using title and description.\r\n\r\n## Example\r\n\r\n```tpl\r\n{{\u003c/* section */\u003e}}\r\n```\r\n\r\n{{\u003csection\u003e}}\r\n",
    "lastmodified": "2023-08-20T18:24:57.0857063-04:00",
    "tags": []
  },
  "/amethyst/features/section/first-page": {
    "title": "first-page",
    "content": "# First page\r\n\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \r\n\r\n\u003c!--more--\u003e\r\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n",
    "lastmodified": "2023-08-20T18:24:57.0857063-04:00",
    "tags": []
  },
  "/amethyst/features/section/second-page": {
    "title": "second-page",
    "content": "# Second Page\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\r\n\r\n\u003c!--more--\u003e\r\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n\r\n",
    "lastmodified": "2023-08-20T18:24:57.0867071-04:00",
    "tags": []
  },
  "/amethyst/features/tabs": {
    "title": "tabs",
    "content": "# Tabs\r\n\r\nTabs let you organize content by context, for example installation instructions for each supported platform.\r\n\r\n```tpl\r\n{{\u003c/* tabs \"uniqueid\" */\u003e}}\r\n{{\u003c/* tab \"MacOS\" */\u003e}} # MacOS Content {{\u003c/* /tab */\u003e}}\r\n{{\u003c/* tab \"Linux\" */\u003e}} # Linux Content {{\u003c/* /tab */\u003e}}\r\n{{\u003c/* tab \"Windows\" */\u003e}} # Windows Content {{\u003c/* /tab */\u003e}}\r\n{{\u003c/* /tabs */\u003e}}\r\n```\r\n\r\n## Example\r\n\r\n{{\u003c tabs \"uniqueid\" \u003e}}\r\n{{\u003c tab \"MacOS\" \u003e}}\r\n# MacOS\r\n\r\nThis is tab **MacOS** content.\r\n\r\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat\r\nstringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\r\nprotulit, sed sed aere valvis inhaesuro Pallas animam: qui _quid_, ignes.\r\nMiseratus fonte Ditis conubia.\r\n{{\u003c /tab \u003e}}\r\n\r\n{{\u003c tab \"Linux\" \u003e}}\r\n\r\n# Linux\r\n\r\nThis is tab **Linux** content.\r\n\r\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat\r\nstringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\r\nprotulit, sed sed aere valvis inhaesuro Pallas animam: qui _quid_, ignes.\r\nMiseratus fonte Ditis conubia.\r\n{{\u003c /tab \u003e}}\r\n\r\n{{\u003c tab \"Windows\" \u003e}}\r\n\r\n# Windows\r\n\r\nThis is tab **Windows** content.\r\n\r\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat\r\nstringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\r\nprotulit, sed sed aere valvis inhaesuro Pallas animam: qui _quid_, ignes.\r\nMiseratus fonte Ditis conubia.\r\n{{\u003c /tab \u003e}}\r\n{{\u003c /tabs \u003e}}\r\n",
    "lastmodified": "2023-08-20T18:24:57.0867071-04:00",
    "tags": []
  },
  "/amethyst/setup/": {
    "title": "_index",
    "content": "",
    "lastmodified": "2023-08-20T18:24:57.0877064-04:00",
    "tags": []
  },
  "/amethyst/setup/config": {
    "title": "Customization",
    "content": "\r\n# Configuration\r\nAmethyst is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you'd like to get.\r\n\r\nThe majority of configuration can be found under `config.yaml`. An example, with descriptions for each setting, can be found [here](https://github.com/64bitpandas/amethyst/blob/main/config.yaml).\r\n\r\n### Code Block Titles\r\nTo add code block titles with Amethyst:\r\n\r\n1. Ensure that code block titles are enabled in the configuration:\r\n\r\n    ```yaml {title=\"data/config.yaml\", linenos=false}\r\n    enableCodeBlockTitle: true\r\n    ```\r\n\r\n2. Add the `title` attribute to the desired [code block\r\n   fence](https://gohugo.io/content-management/syntax-highlighting/#highlighting-in-code-fences):\r\n\r\n      ```markdown {linenos=false}\r\n       ```yaml {title=\"data/config.yaml\"}\r\n       enableCodeBlockTitle: true  # example from step 1\r\n       ```\r\n      ```\r\n\r\n**Note** that if `{title=\u003cmy-title\u003e}` is included, and code block titles are not\r\nenabled, no errors will occur, and the title attribute will be ignored.\r\n\r\n### HTML Favicons\r\nIf you would like to customize the favicons, you \r\ncan add them to the `data/config.yaml` file. The **default** without any set \r\n`favicon` key is:\r\n\r\n```html {title=\"layouts/partials/head.html\", linenostart=15}\r\n\u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\r\n```\r\n\r\nThe default can be overridden by defining a value to the `favicon` key in your \r\n`data/config.yaml` file. For example, here is a `List[Dictionary]` example format, which is\r\nequivalent to the default:\r\n\r\n```yaml {title=\"data/config.yaml\", linenos=false}\r\nfavicon:\r\n  - { rel: \"shortcut icon\", href: \"icon.png\", type: \"image/png\" }\r\n#  - { ... } # Repeat for each additional favicon you want to add\r\n```\r\n\r\nIn this format, the keys are identical to their HTML representations.\r\n\r\nIf you plan to add multiple favicons generated by a website (see list below), it\r\nmay be easier to define it as HTML. Here is an example which appends the \r\n**Apple touch icon** to Amethyst's default favicon:\r\n\r\n```yaml {title=\"data/config.yaml\", linenos=false}\r\nfavicon: |\r\n  \u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\r\n  \u003clink rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\"\u003e\r\n```\r\n\r\nThis second favicon will now be used as a web page icon when someone adds your \r\nwebpage to the home screen of their Apple device. If you are interested in more \r\ninformation about the current and past standards of favicons, you can read \r\n[this article](https://www.emergeinteractive.com/insights/detail/the-essentials-of-favicons/).\r\n\r\n**Note** that all generated favicon paths, defined by the `href` \r\nattribute, are relative to the `static/` directory.\r\n\r\n### Graph View\r\nTo customize the Interactive Graph view, you can poke around `data/graphConfig.yaml`. The default configuration, with descriptions, can be found [here](https://github.com/64bitpandas/amethyst/blob/main/data/graphConfig.yaml).\r\n\r\n### Language Support\r\n[Chinese, Japanese, and Korean support](/amethyst/features/language.md) comes out of the box with Amethyst.\r\n\r\nWant to support languages that read from right-to-left (like Arabic)? Hugo (and by proxy, Amethyst) supports this natively.\r\n\r\nFollow the steps [Hugo provides here](https://gohugo.io/content-management/multilingual/#configure-languages) and modify your `config.yaml`\r\n\r\nFor example:\r\n\r\n```yaml\r\ndefaultContentLanguage: ar\r\nlanguages:\r\n  ar:\r\n    languagedirection: rtl\r\n    title: مدونتي\r\n    weight: 2\r\n```\r\n\r\n# Custom Styles\r\nWant to go even more in-depth? You can add custom CSS styling in `assets/_custom.scss`. If you'd like to target specific parts of the site, you can add ids and classes to the HTML partials in `/layouts/partials`. \r\n\r\n### Changing the Color Scheme\r\nThe default color schemes for light mode and dark mode are located in `assets/_colors.scss`. You can replace the values for existing color variables for drop-in edits, or create new variables to reference in `_custom.scss`.\r\n\r\n### Changing the Fonts\r\nAll fonts are defined in `assets/_fonts.scss`. There are examples for both local fonts (defined using `@font-face`) and webfonts (fetched with `@import` from a font distributor such as Google Fonts).\r\n\r\nYou can place all local fonts in the `static/fonts` folder.\r\n\r\n### Partials\r\nPartials are what dictate what gets rendered to the page. Want to change how pages are styled and structured? You can edit the appropriate layout in `/layouts`.\r\n\r\nFor example, the structure of the home page can be edited through `/layouts/index.html`. To customize the footer, you can edit `/layouts/partials/footer.html`\r\n\r\nMore info about partials on [Hugo's website.](https://gohugo.io/templates/partials/)\r\n\r\nStill having problems? Checkout our [FAQ and Troubleshooting guide](/amethyst/setup/troubleshooting.md).\r\n\r\n\r\n",
    "lastmodified": "2023-08-21T16:50:49.2150136-04:00",
    "tags": [
      "setup"
    ]
  },
  "/amethyst/setup/custom-Domain": {
    "title": "Custom Domain",
    "content": "\r\n### Registrar\r\nThis step is only applicable if you are using a **custom domain**! If you are using a `\u003cYOUR-USERNAME\u003e.github.io` domain, you can skip this step.\r\n\r\nFor this last bit to take effect, you also need to create a CNAME record with the DNS provider you register your domain with (i.e. NameCheap, Google Domains).\r\n\r\nGitHub has some [documentation on this](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site), but the tldr; is to\r\n\r\n1. Go to your forked repository (`github.com/\u003cYOUR-GITHUB-USERNAME\u003e/amethyst`) settings page and go to the Pages tab. Under \"Custom domain\", type your custom domain, then click **Save**.\r\n2. Go to your DNS Provider and create a CNAME record that points from your domain to `\u003cYOUR-GITHUB-USERNAME.github.io.` (yes, with the trailing period).\r\n\r\n\t![Example Configuration for Quartz](/amethyst/Amethyst/setup/images/google-domains.png)*Example Configuration for Quartz*\r\n3. Wait 30 minutes to an hour for the network changes to kick in.\r\n4. Done!",
    "lastmodified": "2023-08-21T16:50:49.2140172-04:00",
    "tags": []
  },
  "/amethyst/setup/editing": {
    "title": "Editing Content",
    "content": "\r\n## Editing \r\nAmethyst runs on top of [Hugo](https://gohugo.io/) so all notes are written in [Markdown](https://www.markdownguide.org/getting-started/).\r\n\r\n### Folder Structure\r\nHere's a rough overview of what's what.\r\n\r\n**All notes you want to publish should go in the `/content` folder.** To make edits, you can open any of the files and make changes directly and save it. You can organize content into any subfolder you'd like.\r\n\r\n**To edit the main home page, open `/content/_index.md`.**\r\n\r\nTo create a link between notes in your garden, just create a normal link using Markdown pointing to the document in question. Please note that **all links should be relative to the root `/content` path**. \r\n\r\n```markdown\r\nFor example, I want to link this current document to `setup/config.md`.\r\n[A link to the config page](/amethyst/setup/config.md)\r\n```\r\n\r\nSimilarly, you can put local images anywhere in the `/content` folder.\r\n\r\n```markdown\r\nExample image (source is in content/Amethyst/setup/images/example.png)\r\n![Example Image](/content/Amethyst/setup/images/example.png)\r\n```\r\n\r\nYou can also use wikilinks if that is what you are more comfortable with!\r\n\r\n### Front Matter\r\nHugo is picky when it comes to metadata for files. Make sure that your title is double-quoted and that you have a title defined at the top of your file in the front matter like so. You can also add tags here as well.\r\n\r\n```yaml\r\n---\r\ntitle: \"Example Title\"\r\ntags:\r\n- example-tag\r\n---\r\n\r\nRest of your content here...\r\n```\r\n\r\nYou can specify additional params in the front matter of individual pages:\r\n\r\n```toml\r\n# Set type to 'docs' if you want to render page outside of configured section or if you render section other than 'docs'\r\ntype = 'docs'\r\n\r\n# Set page weight to re-arrange items in file-tree menu (if BookMenuBundle not set)\r\nweight = 10\r\n\r\n# (Optional) Set to 'true' to mark page as flat section in file-tree menu (if BookMenuBundle not set)\r\nbookFlatSection = false\r\n\r\n# (Optional) Set to hide nested sections or pages at that level. Works only with file-tree menu mode\r\nbookCollapseSection = true\r\n\r\n# (Optional) Set true to hide page or section from side menu (if BookMenuBundle not set)\r\nbookHidden = false\r\n\r\n# (Optional) Set 'false' to hide ToC from page\r\nbookToC = true\r\n\r\n# (Optional) If you have enabled BookComments for the site, you can disable it for specific pages.\r\nbookComments = true\r\n\r\n# (Optional) Set to 'false' to exclude page from search index.\r\nbookSearchExclude = true\r\n\r\n# (Optional) Set explicit href attribute for this page in a menu (if BookMenuBundle not set)\r\nbookHref = ''\r\n```\r\n\r\n\r\n### Obsidian\r\nAmethyst is built especially for use with [Obsidian](http://obsidian.md/) as a text editor. \r\n\r\nSee below for more information:\r\n\r\n\u003e 🔗 Step 3: [How to setup your Obsidian Vault to work with Amethyst](/amethyst/setup/obsidian.md)\r\n\r\n## Previewing Changes\r\nThis step is purely optional and mostly for those who want to see the published version of their digital garden locally before opening it up to the internet. This is *highly recommended* but not required.\r\n\r\n\u003e 👀 Step 4: [Preview Changes](/amethyst/setup/preview%20changes.md)\r\n\r\nFor those who like to live life more on the edge, viewing the garden through Obsidian gets you pretty close to the real thing.\r\n\r\n## Publishing Changes\r\nAfter you've finished editing your notes, you can publish them to the internet!\r\n\r\n\u003e 🌍 Step 5: [Hosting Amethyst online!](/amethyst/setup/hosting.md)\r\n\r\nHaving problems? Check out our [FAQ and Troubleshooting guide](/amethyst/setup/troubleshooting.md).\r\n",
    "lastmodified": "2023-08-21T16:50:49.2140172-04:00",
    "tags": [
      "setup"
    ]
  },
  "/amethyst/setup/hosting": {
    "title": "Deploying Amethyst to the Web",
    "content": "\r\n## Hosting on GitHub Pages\r\nAmethyst is designed to be effortless to deploy. If you forked and cloned Amethyst directly from the repository, everything should already be good to go! Follow the steps below.\r\n\r\n### Enable GitHub Actions\r\nBy default, GitHub disables workflows from running automatically on Forked Repostories. Head to the 'Actions' tab of your forked repository and Enable Workflows to setup deploying your site!\r\n\r\n![Enable GitHub Actions](/amethyst/setup/images/github-actions.png)*Enable GitHub Actions*\r\n\r\n### Enable GitHub Pages\r\n\r\nHead to the 'Settings' tab of your forked repository and go to the 'Pages' tab.\r\n\r\n1. (IMPORTANT) Set the source to deploy from `master` (and not `hugo`) using `/ (root)`\r\n2. Set a custom domain here if you have one!\r\n\r\n![Enable GitHub Pages](/amethyst/setup/images/github-pages.png)*Enable GitHub Pages*\r\n\r\n### Pushing Changes\r\nTo see your changes on the internet, we need to push it them to GitHub. Amethyst is a `git` repository so updating it is the same workflow as you would follow as if it were just a regular software project.\r\n\r\n```shell\r\n# Navigate to Amethyst folder\r\ncd \u003cpath-to-amethyst\u003e\r\n\r\n# Commit all changes\r\ngit add .\r\ngit commit -m \"message describing changes\"\r\n\r\n# Push to GitHub to update site\r\ngit push origin main\r\n```\r\n\r\nNote: we specifically push to the `main` branch here. Our GitHub action automatically runs everytime a push to is detected to that branch and then updates the `deploy` branch for redeployment.\r\n\r\n### Setting up the Site\r\nNow let's get this site up and running. Never hosted a site before? No problem. Have a fancy custom domain you already own or want to use a subdomain? That's easy too.\r\n\r\n\u003e Don't want to use GitHub Pages? Continue following the instructions below, and simply point your hosting solution to serve the `deploy` branch with no additional build steps required.\r\n\r\nHere, we take advantage of GitHub's free page hosting to deploy our site. Change `baseURL` in `/config.toml`. \r\n\r\nMake sure that your `baseURL` has a trailing `/`!\r\n\r\n[Reference `config.yaml` here](https://github.com/64bitpandas/amethyst/blob/main/config.yaml)\r\n\r\n```yaml\r\nbaseURL: \"https://\u003cYOUR-DOMAIN\u003e/\"\r\n```\r\n\r\nIf you are using this under a subdomain (e.g. `\u003cYOUR-GITHUB-USERNAME\u003e.github.io/amethyst/`), include the trailing `/`. **You need to do this especially if you are using GitHub!**\r\n\r\n```yaml\r\nbaseURL: \"https://\u003cYOUR-GITHUB-USERNAME\u003e.github.io/amethyst/\"\r\n```\r\n\r\nChange `cname` in `/.github/workflows/deploy.yaml`. Again, if you don't have a custom domain to use, you can use `\u003cYOUR-USERNAME\u003e.github.io`.\r\n\r\nPlease note that the `cname` field should *not* have any path `e.g. end with /amethyst` or have a trailing `/`.\r\n\r\n[Reference `deploy.yaml` here](https://github.com/64bitpandas/amethyst/blob/main/.github/workflows/deploy.yaml)\r\n\r\n```yaml {title=\".github/workflows/deploy.yaml\"}\r\n- name: Deploy  \r\n  uses: peaceiris/actions-gh-pages@v3  \r\n  with:  \r\n\tgithub_token: ${{ secrets.GITHUB_TOKEN }} # this can stay as is, GitHub fills this in for us!\r\n\tpublish_dir: ./public  \r\n\tpublish_branch: deploy\r\n\tcname: \u003cYOUR-DOMAIN\u003e\r\n```\r\n\r\nHave a custom domain? [Learn how to set it up with Amethyst ](/amethyst/setup/custom%20Domain.md).\r\n\r\n### Ignoring Files\r\nOnly want to publish a subset of all of your notes? Don't worry, Amethyst makes this a simple two-step process.\r\n\r\n❌ [Excluding pages from being published](/amethyst/setup/ignore%20notes.md)\r\n\r\n---\r\n\r\nNow that your site is live, let's figure out how to make Amethyst really *yours*!\r\n\r\n\u003e Step 6: 🎨 [Customizing Amethyst](/amethyst/setup/config.md)\r\n\r\nHaving problems? Checkout our [FAQ and Troubleshooting guide](/amethyst/setup/troubleshooting.md).\r\n",
    "lastmodified": "2023-08-21T16:50:49.2110128-04:00",
    "tags": [
      "setup"
    ]
  },
  "/amethyst/setup/ignore_notes": {
    "title": "Ignoring Notes",
    "content": "\r\nEdit `ignoreFiles` in `config.yaml` to include paths you'd like to exclude from being rendered.\r\n\r\n```toml\r\n...\r\nignoreFiles: [  \r\n    \"/content/templates/*\",  \r\n    \"/content/private/*\", \r\n    \"\u003cyour path here\u003e\"\r\n]\r\n```\r\n\r\n`ignoreFiles` supports the use of Regular Expressions (RegEx) so you can ignore patterns as well (e.g. ignoring all `.png`s by doing `\\\\.png$`).\r\nTo ignore a specific file, you can also add the tag `draft: true` to the frontmatter of a note.\r\n\r\n```markdown\r\n---\r\ntitle: Some Private Note\r\ndraft: true\r\n---\r\n...\r\n```\r\n\r\nMore details in [Hugo's documentation](https://gohugo.io/getting-started/configuration/#ignore-content-and-data-files-when-rendering).\r\n\r\n### Global Ignore\r\nHowever, just adding to the `ignoreFiles` will only prevent the page from being access through Amethyst. If you want to prevent the file from being pushed to GitHub (for example if you have a public repository), you need to also add the path to the `.gitignore` file at the root of the repository.",
    "lastmodified": "2023-08-21T16:52:17.6419969-04:00",
    "tags": []
  },
  "/amethyst/setup/obsidian": {
    "title": "Obsidian Vault Integration",
    "content": "\r\n## Setup\r\nObsidian is the preferred way to use Amethyst. You can either create a new Obsidian Vault or link one that your already have.\r\n\r\n### New Vault\r\nIf you don't have an existing Vault, [download Obsidian](https://obsidian.md/) and create a new Vault in the `/content` folder that you created and cloned during the [setup](/amethyst/setup/setup.md) step.\r\n\r\n### Linking an existing Vault (simple)\r\nThe easiest way to use an existing Vault is to copy all of your files (directory and hierarchies intact) into the `/content` folder.\r\n\r\n### Linking an existing Vault (using git)\r\nIf you're editing in an existing vault and don't want to have to keep copying your files over, one solution is to create a new Git repository for just the notes you want to publish.\r\n\r\nThen, in both your vault and in Amethyst, run the following command, replacing the link with one to your new repository:\r\n```bash\r\ngit submodule add https://github.com/\u003cYOUR_USERNAME\u003e/\u003cREPO_NAME\u003e content\r\n```\r\n\r\n## Settings\r\nNow that you've added your notes to Amethyst, let's fix some settings so that they play well.\r\n\r\n1. Under Options \u003e Files and Links, set the New link format to always use Absolute Path in Vault.\r\n2. Go to Settings \u003e Files \u0026 Links \u003e Turn \"on\" automatically update internal links.\r\n\r\n![Obsidian Settings](/amethyst/setup/images/obsidian-settings.png)*Obsidian Settings*\r\n\r\n## Templates\r\nInserting front matter everytime you want to create a new Note gets annoying really quickly. Luckily, Obsidian supports templates which makes inserting new content really easily.\r\n\r\n**If you decide to overwrite the `/content` folder completely, don't remove the `/content/templates` folder!**\r\n\r\nHead over to Options \u003e Core Plugins and enable the Templates plugin. Then go to Options \u003e Hotkeys and set a hotkey for 'Insert Template' (I recommend `[cmd]+T`). That way, when you create a new note, you can just press the hotkey for a new template and be ready to go!\r\n\r\n\u003e 👀 Step 4: [Preview Changes](/amethyst/setup/preview%20changes.md)",
    "lastmodified": "2023-08-21T16:50:49.2110128-04:00",
    "tags": [
      "setup"
    ]
  },
  "/amethyst/setup/preview-changes": {
    "title": "Preview Changes",
    "content": "\r\nIf you'd like to preview what your site looks like before deploying it to the internet, the following\r\ninstructions guide you through installing the proper dependencies to run it locally.\r\n\r\n\r\n## Install `hugo-obsidian`\r\nThis step will generate the list of backlinks for Hugo to parse. Ensure you have [Go](https://golang.org/doc/install) (\u003e= 1.16) installed.\r\n\r\n```bash\r\n# Install and link `hugo-obsidian` locally\r\ngo install github.com/jackyzha0/hugo-obsidian@latest\r\n```\r\n\r\nIf you are running into an error saying that `command not found: hugo-obsidian`, make sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize hugo-obsidian as an executable.\r\n\r\nAfterwards, start the Hugo server as shown above and your local backlinks and interactive graph should be populated!\r\n\r\n##  Installing Hugo\r\nHugo is the static site generator that powers Amethyst. [Install Hugo with \"extended\" Sass/SCSS version](https://gohugo.io/getting-started/installing/) first. Then,\r\n\r\n```bash\r\n# Navigate to your local Amethyst folder\r\ncd \u003clocation-of-your-local-amethyst\u003e\r\n\r\n# Start local server\r\nmake serve\r\n\r\n# View your site in a browser at http://localhost:1313/\r\n```\r\n\r\nNow that you are happy with how your Amethyst instance looks, let's get it hosted!\r\n\r\n\u003e 🌍 Step 5: [Hosting Amethyst online!](/amethyst/setup/hosting.md)\r\n",
    "lastmodified": "2023-08-21T16:50:49.2060106-04:00",
    "tags": [
      "setup"
    ]
  },
  "/amethyst/setup/search": {
    "title": "Search",
    "content": "\r\nAmethyst supports two modes of searching through content.\r\n\r\n## Full-text\r\nFull-text search is the default in Amethyst. It produces results that *exactly* match the search query. This is easier to setup but usually produces lower quality matches.\r\n\r\n```yaml {title=\"config.yaml\"}\r\n# the default option\r\nenableSemanticSearch: false\r\n```\r\n\r\n## Natural Language\r\nNatural language search is powered by [Operand](https://beta.operand.ai/). It understands language like a person does and finds results that best match user intent. In this sense, it is closer to how Google Search works.\r\n\r\nNatural language search tends to produce higher quality results than full-text search.\r\n\r\nHere's how to set it up.\r\n\r\n1. Login or Register for a new Operand account. Click the verification link sent to your email, and you'll be redirected to the dashboard. (Note) You do not need to enter a credit card to create an account, or get started with the Operand API. The first $10 of usage each month is free. To learn more, see pricing. If you go over your free quota, we'll (politely) reach out and ask you to configure billing.\r\n2. Create your first index. On the dashboard, under \"Indexes\", enter the name and description of your index, and click \"Create Index\". Note down the ID of the index (obtained by clicking on the index name in the list of indexes), as you'll need it in the next step. IDs are unique to each index, and look something like `uqv1duxxbdxu`.\r\n3. Click into the index you've created. Under \"Index Something\", select \"SITEMAP\" from the dropdown and click \"Add Source\".\r\n4. For the \"Sitemap.xml URL\", put your deployed site's base URL followed by `sitemap.xml`. For example, for `amethyst.bencuan.me`, put `https://amethyst.bencuan.me/sitemap.xml`. Leave the URL Regex empty. \r\n5. Get your API key. On the dashboard, under \"API Keys\", you can manage your API keys. If you don't already have an API key, click \"Create API Key\". You'll need this for the next step.\r\n6. Open `config.yaml`. Set `enableSemanticSearch` to `true`, `operandApiKey` to your copied key, and `operandIndexId` to the ID of the index we created from earlier..\r\n\r\n```yaml {title=\"config.yaml\"}\r\n# the default option\r\nsearch:\r\n  enableSemanticSearch: true\r\n  operandApiKey: \"jp9k5hudse2a828z98kxd6z3payi8u90rnjf\"\r\n  operandIndexId: \"s0kf3bd6tldw\"\r\n```\r\n7. Push your changes to the site and wait for it to deploy.\r\n8. Check the Operand dashboard and wait for your site to index. Enjoy natural language search powered by Operand!\r\n",
    "lastmodified": "2023-08-20T18:24:57.0997154-04:00",
    "tags": []
  },
  "/amethyst/setup/setup": {
    "title": "Setup",
    "content": "\r\n## Getting Started\r\nSetting up Amethyst requires a basic understanding of `git`. If you are unfamiliar, [this resource](https://resources.nwplus.io/2-beginner/how-to-git-github.html) is a great place to start!\r\n\r\n### Forking\r\n\u003e A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\r\n\r\nNavigate to the GitHub repository for the Amethyst project:\r\n\r\n📁 [Amethyst Repository](https://github.com/64bitpandas/amethyst)\r\n\r\nThen, Fork the repository into your own GitHub account. If you don't have an account, you can make on for free [here](https://github.com/join). More details about forking a repo can be found on [GitHub's documentation](https://docs.github.com/en/get-started/quickstart/fork-a-repo).\r\n\r\n### Cloning\r\nAfter you've made a fork of the repository, you need to download the files locally onto your machine. Ensure you have `git`, then type the following command replacing `YOUR-USERNAME` with your GitHub username.\r\n\r\n```shell\r\ngit clone https://github.com/YOUR-USERNAME/amethyst\r\n```\r\n\r\n## Editing\r\nGreat! Now you have everything you need to start editing. If you're ready to start writing content already, check out the recommended flow for editing notes:\r\n\r\n\u003e ✏️ Step 2: [Editing Notes in Amethyst](/amethyst/setup/editing.md)\r\n\r\nHaving problems? Checkout our [FAQ and Troubleshooting guide](/amethyst/setup/troubleshooting.md).\r\n",
    "lastmodified": "2023-08-21T16:50:49.2050114-04:00",
    "tags": [
      "setup"
    ]
  },
  "/amethyst/setup/troubleshooting": {
    "title": "Troubleshooting and FAQ",
    "content": "\r\nStill having trouble? Here are a list of common questions and problems people encounter when installing Amethyst.\r\n\r\n### Does Amethyst have Latex support?\r\nYes! See [LaTeX](Amethyst/features/latex.md) for a brief demo.\r\n\r\n### Can I use \\\u003cObsidian Plugin\\\u003e in Amethyst?\r\nUnless it produces direct Markdown output in the file, no. There currently is no way to bundle plugin code with Amethyst.\r\n\r\nThe easiest way would be to add your own HTML partial that supports the functionality you are looking for.\r\n\r\n### My GitHub pages is just showing the README\r\nMake sure you set the source to deploy from the `deploy` branch (and not `main`) using `/ (root)`! See more in the [hosting](/amethyst/setup/hosting) guide\r\n\r\n### Some of my pages have 'January 1, 0001' as the last modified date\r\nThis is a problem caused by `git` treating files as case-insensitive by default and some of your posts probably have capitalized file names. You can turn this off in your Amethyst by running this command.\r\n\r\n```shell\r\n# in the root folder (same folder as config.toml)\r\ngit config core.ignorecase true\r\n\r\n# or globally (not recommended)\r\ngit config --global core.ignorecase true\r\n```\r\n\r\n### Can I publish only a subset of my pages?\r\nYes! Amethyst makes selective publishing really easy. Heres a guide on [excluding pages from being published](/amethyst/setup/ignore%20notes.md).\r\n\r\n### Can I host this myself and not on GitHub Pages?\r\nYes! All built files can be found under `/public` in the `master` branch. More details under [hosting](/amethyst/setup/hosting.md).\r\n\r\n### `command not found: hugo-obsidian`\r\nMake sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize `hugo-obsidian` as an executable.\r\n\r\n```shell\r\n# Add the following 2 lines to your ~/.bash_profile\r\nexport GOPATH=/Users/$USER/go\r\nexport PATH=$GOPATH/bin:$PATH\r\n\r\n# In your current terminal, to reload the session\r\nsource ~/.bash_profile\r\n```\r\n\r\n### How come my notes aren't being rendered?\r\nYou probably forgot to include front matter in your Markdown files. You can either setup [Obsidian](/amethyst/setup/obsidian.md) to do this for you or you need to manually define it. More details in [the 'how to edit' guide](/amethyst/setup/editing.md).\r\n\r\n### My custom domain isn't working!\r\nWalk through the steps in [the hosting guide](/amethyst/setup/hosting.md) again. Make sure you wait 30 min to 1 hour for changes to take effect.\r\n\r\n### How do I setup Google Analytics?\r\nYou can edit it in `config.toml` and either use a V3 (UA-) or V4 (G-) tag.\r\n\r\n### How do I change the content on the home page?\r\nTo edit the main home page, open `/content/_index.md`.\r\n\r\n### How do I change the colours?\r\nYou can change the theme by editing `assets/custom.scss`. More details on customization and themeing can be found in the [customization guide](/amethyst/setup/config.md).\r\n\r\n### How do I add images?\r\nYou can put images anywhere in the `/content` folder.\r\n\r\n```markdown\r\nExample image (source is in content/Amethyst/setup/images/example.png)\r\n![Example Image](/amethyst/setup/images/example.png)\r\n```\r\n\r\n### My Interactive Graph and Backlinks aren't up to date\r\nBy default, the `linkIndex.json` (which Amethyst needs to generate the Interactive Graph and Backlinks) are not regenerated locally. To set that up, see the guide on [local editing](/amethyst/setup/editing.md)\r\n\r\n### Can I use React/Vue/some other framework?\r\nNot out of the box. You could probably make it work by editing `/layouts/_default/single.html` but that's not what Amethyst is designed to work with. 99% of things you are trying to do with those frameworks you can accomplish perfectly fine using just vanilla HTML/CSS/JS.\r\n\r\n## Still Stuck?\r\nAmethyst isn't perfect! If you're still having troubles, file an issue in the GitHub repo with as much information as you can reasonably provide. Alternatively, [send me a message](https://bencuan.me/contact) using your preferred communication method!\r\n\r\n🐛 [Submit an Issue](https://github.com/64bitpandas/amethyst/issues)",
    "lastmodified": "2023-08-21T16:50:49.2040113-04:00",
    "tags": []
  },
  "/amethyst/setup/updating": {
    "title": "Updating",
    "content": "\r\nHaven't updated Amethyst in a while and want all the cool new optimizations? On Unix/Mac systems you can run the following command for a one-line update! This command will show you a log summary of all commits since you last updated, press `q` to acknowledge this. Then, it will show you each change in turn and press `y` to accept the patch or `n` to reject it. Usually you should press `y` for most of these unless it conflicts with existing changes you've made! \r\n\r\n```shell\r\nmake update\r\n```\r\n\r\nOr, if you don't want the interactive parts and just want to force update your local garden (this assumed that you are okay with some of your personalizations been overriden!)\r\n\r\n```shell\r\nmake update-force\r\n```\r\n\r\nOr, manually checkout the changes yourself.\r\n\r\n\u003e [!warning] Warning!\r\n\u003e\r\n\u003e If you customized the files in `data/`, or anything inside `layouts/`, your customization may be overwritten!\r\n\u003e Make sure you have a copy of these changes if you don't want to lose them.\r\n\r\n\r\n```shell\r\n# add Amethyst as a remote host\r\ngit remote add upstream git@github.com:64bitpandas/amethyst.git\r\n\r\n# index and fetch changes\r\ngit fetch upstream\r\ngit checkout -p upstream/hugo -- layouts .github Makefile assets/js assets/styles/base.scss assets/styles/darkmode.scss data \r\n```\r\n",
    "lastmodified": "2023-08-20T18:24:57.101715-04:00",
    "tags": []
  },
  "/perspectives/": {
    "title": "Perspectives",
    "content": "",
    "lastmodified": "2023-08-20T18:24:57.1037155-04:00",
    "tags": []
  },
  "/perspectives/WTFSIN_1/": {
    "title": "What the F# is Next? (original)",
    "content": "This post is a multi-section re-print of my original blog entry following the meandering path that led me to F#. I plan to [follow up this article with an updated version for 2023](/perspectives/WTFSIN_2), which includes some notes on what I've learned since this was originally penned during lockdown.\r\n\r\n## An(other) Inflection Point\r\n\r\nSpend enough time in technology and you see recurring patterns ebb and flow. The democratization of technology - areas of specialization evolving into commodities - has largely been a net positive. But if you get caught up in the swirl of it you sometimes miss the bigger picture. I did. In my nearly 15 plus year return to machine learning and the analytics domain I hadn't realized my roles were essentially solving the *wrong* problem over and again. The pandemic gave me a chance to take a step back from that to assess in a way I hadn't up to this point, and so this post is a bit on the **next** step in my journey.\r\n\r\n{{\u003c section \u003e}}\r\n",
    "lastmodified": "2023-08-21T22:23:04.4857882-04:00",
    "tags": []
  },
  "/perspectives/WTFSIN_1/a_more_functional_approach": {
    "title": "A More Functional Approach",
    "content": "\r\nMy path to embracing F# was not without its detours and diversions. It's not my first *or even my second* functional-friendly language. With my time at Siebel I picked up java and spent nearly a decade in that \"family\". While I had done quite a bit of java proper I also wrote quite a bit of production code with Groovy. Much of that time I felt like I was wrestling as much with the JVM as solving business problems. And between that and Spark/Scala later in the analytics phase of my consulting work I really grew frustrated with the java runtime and shifted focus to C#. Like most folks in analytics I dabbled a bit with Python, but found that [the inherent functional programming (FP) style of R](https://adv-r.hadley.nz/fp.html) along with its unique ability to efficiently process large observation sets made it a clear choice above Python. So from that time forward I was primarily working in C# or R, and only stepped out to Python when it was already present in Jupyter notebooks or other mixed code environments.\r\n\r\nWhen I took a pause during the pandemic to reconsider my options as a systems architect, I kept stumbling across facets of event sourcing that resonated with functional programming. I thought it might be a form of survivor bias, since I had used a handful of FP languages and really like working with R. But then this last footnote from Greg really brought the point home.\r\n\r\n%[https://www.youtube.com/watch?v=I3uH3iiiDqY\u0026t=3226s]\r\n\r\nSo that put a floor under what my personal experiments were hinting at - I wanted to find a general-purpose functional language that had avenues for real-time operational and analytic workloads. I had taken a brief look at F# a few years ago, but it didn't stick. The story wasn't really cohesive, but now with an impressive portfolio of ports to or interop with .NET and the growing meta-programming libraries that extend F#, I thought it was time to consider it the *one language to rule them all*, at least for my own designs.\r\n\r\n## To The Point\r\n\r\nUnlike my prose, F# is succinct. So aside from being able to take advantage of \"life in the .NET ecosystem\" it also has the ability to pack a great deal of context into a relatively small block of code. I remember being resistant to that idea when going from java \"proper\" to Groovy, having grown acclimated to the former's more verbose syntax. And I hear similar comments from C# developers being perplexed with the terse structure of F# code. But with my exposure to Python and R, F# felt like the best of all worlds. You get the clarity of a composed structure using static typing with robust type inference and a compiler that really keeps you from going far astray. F# had a high quality REPL long before it was cool, and there is [hot module reload in the SAFE Stack](https://safe-stack.github.io/docs/recipes/developing-and-testing/using-hot-reload/) with a more general HMR implementation coming to .NET 6 later this year. From the perspective of supporting rapid development, it has the goods.\r\n\r\nFor an example of F#'s succinct syntax consider this sample from my [Low Code is Dead. Long Live Low Code!](https://h3tech.io/low-code-is-dead-long-live-low-code) blog post. The idea is to illustrate how an F# function extrapolates to C# and then the Intermediate Language that the .NET compiler uses to produce machine code. This isn't to say F# is better or worse than any other language, just that it has certain traits that make it advantageous for a direct form of expression.\r\n\r\n## Meta Programming\r\n\r\nThe thing that really turned my head was [Fable](https://fable.io/). I found out about it after I had just rolled off of a project to build a streaming platform. In that project I had run into a brick wall with Blazor WebAssembly because of the inability to stream DRM protected content through the WASM sandbox. It was a road block that sent me scurrying back to Node and JavaScript, and while the polyglot life is the new normal is today's tech scene it was a point of frustration. Fable offers all of the type safety of TypeScript while rendering JavaScript that can run on any browser.\r\n\r\nThe real genius of it emerges with the [SAFE Stack](https://safe-stack.github.io/), where sharing allows a single code file to ***transpile* to *multiple* targets**. So you can create one definition that informs both the server interface and the client applications. I was pretty excited about the SAFE Stack because of my work in the R ecosystem - with R markdown, Shiny server and Blogdown's transpiling to HTML. So while I recognized the \"meta\" pattern I had seen in R, the SAFE Stack demonstrated clearly that F# could span domains in a way I hadn't seen before.\r\n\r\n* [What The F# is Next (original)](/perspectives/WTFSIN_1)\r\n  * [Warehouse Full of Cannibals](/perspectives/WTFSIN_1/warehouse_full_of_cannibals.md)\r\n  * [The Wrong Kind of DDD](/perspectives/WTFSIN_1/the_wrong_kind_of_DDD.md)\r\n  * A More Functional Approach\r\n  * [Machine Learning](/perspectives/WTFSIN_1/machine_learning.md)\r\n  * [Success and Kinesthetic Learning](/perspectives/WTFSIN_1/success_and_kinesthetic_learning.md)\r\n  * [Akka.NET, Actor Model and the Reactive Manifesto](/perspectives/WTFSIN_1/akka_and_the_reactive_manifesto.md)\r\n  * [Other Learning Projects](/perspectives/WTFSIN_1/other_learning_projects.md)\r\n  * [Coda - Microsoft, The Enterprise \u0026 The Open Source Balancing Act](/perspectives/WTFSIN_1/coda_open_source_balancing_act.md)",
    "lastmodified": "2023-08-21T22:32:41.3490153-04:00",
    "tags": []
  },
  "/perspectives/WTFSIN_1/akka_and_the_reactive_manifesto": {
    "title": "Akka.NET, Actor Model and the Reactive Manifesto",
    "content": "\r\n## Akka.NET, Actor Model and the Reactive Manifesto\r\n\r\nThis is where I'll catch some flack from both mathematicians and  computer scientists. But my personal opinion is that serverless apps - both stateless and *durable* functions - are really a rehash of the actor model, which has been around for decades. I had some early brushes with the concept while in school, but it really sunk in when I started looking for ways to make operational systems more elastic and reactive. It turns out that I'm not alone in this, and actor model in Akka.NET (the name being an approved homage to the original Akka implementation) brings event-driven systems shoulder-to-shoulder with event sourced architectures. To many software engineers event *driven* and event *sourced* are distinct from one another, so it's worthwhile to consider each on their own before you find where they might overlap in a given domain.\r\n\r\nHere is a clip from a presentation by Aaron Stannard, co-creator of Akka.NET and CTO of [Petabridge](https://Petabridge.com/). They cover a few highlights of the Akka.NET actor system.\r\n\r\n%[https://www.youtube.com/watch?v=ozelpjr9SXE\u0026t=1204s]\r\n\r\nActor systems are a form of orchestrated ephemeral compute that can very efficiently create a cohesive reactive application surface. There are many of these systems showing up across tech stacks well beyond public cloud serverless planes or Akka and Akka.NET. The [reactive manifesto](https://www.reactivemanifesto.org/) was authored in 2014 and serves as a common point of departure for many, and from my perspective is at least partly responsible for the renewed interest in the actor pattern. I count myself as both early *and* late to this party. Given [the dilution that has undercut the agile manifesto](https://h3tech.io/how-agile-jumped-the-shark-into-a-zombie-apocalypse), I'll be curious to see how ***this*** manifesto ages. While I think that in some ways it doesn't go far enough, I added my signature to show solidarity with its most high-minded goals.\r\n\r\nThe part of Akka.NET that really has my attention is that Petabridge has provided [an entire site on learning how to implement Akka.NET step-by-step](https://Petabridge.com/bootcamp/), and it's ***free***. I'm definitely adding that site to my list of online learning resources. While it's written in and around C#, I'm looking forward to embracing and bring over Scott Wlaschin's \"railway\" pattern in F#. I had a sense I would need to maintain and even sharpen my C# chops if I was going dive into F# with increased momentum. From early on I had a sense that leaning on R would only get me so far down the road, but this new ground is exciting.\r\n\r\n## Beyond Reactive with Wilderness Labs \u0026 Xamarin\r\n\r\nI lump mobile apps and IoT with automotive telematics because they're all compute at the edge receiving and producing data in exchange with a remote backplane. I also mention them here because the ***same*** folks who created [Wilderness Labs](https://www.wildernesslabs.co/), a .NET embedded IoT solution, also created the original [Xamarin](https://dotnet.microsoft.com/apps/xamarin) framework, a cross-platform stack targeting apps for Android, iOS and beyond. I'm working on a Meadow F7 custom sensor driver that's part of a stealth project. But Wilderness Labs just released an update that included an F# project template and direct .NET Standard 2.1 support. So expect more on this, as it will be a showcase on how F# can support a variety of applications, even microcontroller workloads.\r\n\r\n![meadow-project.jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1659494034118/vpmcClf_z.jpg align=\"left\")\r\n\r\n* [What The F# is Next (original)](/perspectives/WTFSIN_1)\r\n  * [Warehouse Full of Cannibals](/perspectives/WTFSIN_1/warehouse_full_of_cannibals.md)\r\n  * [The Wrong Kind of DDD](/perspectives/WTFSIN_1/the_wrong_kind_of_DDD.md)\r\n  * [A More Functional Approach](/perspectives/WTFSIN_1/a_more_functional_approach.md)\r\n  * [Machine Learning](/perspectives/WTFSIN_1/machine_learning.md)\r\n  * [Success and Kinesthetic Learning](/perspectives/WTFSIN_1/success_and_kinesthetic_learning.md)\r\n  * Akka.NET, Actor Model and the Reactive Manifesto\r\n  * [Other Learning Projects](/perspectives/WTFSIN_1/other_learning_projects.md)\r\n  * [Coda - Microsoft, The Enterprise \u0026 The Open Source Balancing Act](/perspectives/WTFSIN_1/coda_open_source_balancing_act.md)\r\n",
    "lastmodified": "2023-08-21T22:36:22.8539806-04:00",
    "tags": [
      "Petabridge"
    ]
  },
  "/perspectives/WTFSIN_1/coda_open_source_balancing_act": {
    "title": "Coda - Microsoft, the Enterprise \u0026 The Open Source Balancing Act",
    "content": "\r\n## Coda: Microsoft, the Enterprise \u0026 The Open Source Balancing Act\r\n\r\nI'm sure that Microsoft takes ***many*** figurative arrows to the chest and back while navigating between the demands of their enterprise customers and the broader open source community. That's what happens when you make a large target of yourself, such as acquiring GitHub. But Microsoft understood that it's not just ideas from Redmond that are worth supporting. Seeing what Aaron Stannard has done with [Petabridge](https://Petabridge.com) and Akka.NET, and likewise Greg Young's work with [Event Store](https://www.eventstore.com/), and Isaac Abraham with [Compositional IT](https://www.compositional-it.com/) and [Farmer](https://compositionalit.github.io/farmer/), as well as Bryan Costanich's leading edge work with [Wilderness Labs](https://www.wildernesslabs.co/) each show that a well-managed open source business model yields innovation that the enterprise can rely on.\r\n\r\nAnd with GitHub Sponsors there's more ways to support open-source while fitting within the budget constraints of a start-up or growing company. I'm sponsoring [Zaid Ajaj](https://github.com/sponsors/Zaid-Ajaj) for his incredible work with Snowflaqe, Feliz and myriad other projects he supports. And [Maxime Mangel has a Patreon page](https://patreon.com/MangelMaxime) for supporting his Fable Compiler. If it's worth making these tools part of your business, it's worth finding a business model to support them. And GitHub Sponsors should be applauded for providing a platform which expands the number of professional contributers to the world of software engineering. I'm hopeful that other companies that make their money by strip-mining open source projects - or - by building moats around rebranded scrapes of others' technologies will take note and see that the **better** way is to create a rising tide that lifts ***all*** ships.\r\n\r\nAnd Microsoft isn't new to this. Don Syme and [Microsoft Research](https://www.microsoft.com/en-us/research/) deserve credit for making the long-term investments to bring cloistered concepts into the real world. And [FSharp.org](https://fsharp.org/) continues to create fertile ground for ideas to grow in the .NET ecosystem. Like so many that have read this far (bless you!) I've watched Microsoft find its way forward and have been frustrated at times. But on balance I find that the investments they're making, not just with navel-gazing concerns of high-performance compute, but also their [sustainability initiatives](https://azure.microsoft.com/en-us/global-infrastructure/sustainability/) have the makings of a more responsive and more responsible future. It can be difficult to see a silver lining as a global pandemic becomes endemic. But as a life-long technologist I can say with confidence that this landscape makes me more hopeful than ever.\r\n\r\n* [What The F# is Next (original)](/perspectives/WTFSIN_1)\r\n  * [Warehouse Full of Cannibals](/perspectives/WTFSIN_1/warehouse_full_of_cannibals.md)\r\n  * [The Wrong Kind of DDD](/perspectives/WTFSIN_1/the_wrong_kind_of_DDD.md)\r\n  * [A More Functional Approach](/perspectives/WTFSIN_1/a_more_functional_approach.md)\r\n  * [Machine Learning](/perspectives/WTFSIN_1/machine_learning.md)\r\n  * [Success and Kinesthetic Learning](/perspectives/WTFSIN_1/success_and_kinesthetic_learning.md)\r\n  * [Akka.NET, Actor Model and the Reactive Manifesto](/perspectives/WTFSIN_1/akka_and_the_reactive_manifesto.md)\r\n  * [Other Learning Projects](/perspectives/WTFSIN_1/other_learning_projects.md)\r\n  * Coda - Microsoft, The Enterprise \u0026 The Open Source Balancing Act",
    "lastmodified": "2023-08-21T22:37:00.5997245-04:00",
    "tags": [
      "Petabridge"
    ]
  },
  "/perspectives/WTFSIN_1/machine_learning": {
    "title": "Machine Learning",
    "content": "\r\nAnd it's worthwhile to point out the growth in .NET machine learning projects, both to facilitate interop with other frameworks as well as purpose-built .NET workloads. The Apache Spark library is particularly notable that it works with either C# or F# *and* code can be deployed to Azure HDI, Amazon's Elastic MapReduce or Databricks. While .NET gets credit for \"playing well with others\" by being able to run on Mac and Linux, the transpile and interop story of .NET and particularly F# goes much further than that. While I discuss some F# specific tooling, these links provide a quick view into open source initiatives in the machine learning community.\r\n\r\n%[https://github.com/fslaborg]\r\n\r\n%[https://github.com/SciSharp]\r\n\r\n%[https://dotnet.microsoft.com/apps/machinelearning-ai/ml-dotnet]\r\n \r\n%[https://dotnet.microsoft.com/apps/data/spark]\r\n\r\n\r\n* [What The F# is Next (original)](/perspectives/WTFSIN_1)\r\n  * [Warehouse Full of Cannibals](/perspectives/WTFSIN_1/warehouse_full_of_cannibals.md)\r\n  * [The Wrong Kind of DDD](/perspectives/WTFSIN_1/the_wrong_kind_of_DDD.md)\r\n  * [A More Functional Approach](/perspectives/WTFSIN_1/a_more_functional_approach.md)\r\n  * [Machine Learning](/perspectives/WTFSIN_1/machine_learning.md)\r\n  * [Success and Kinesthetic Learning](/perspectives/WTFSIN_1/success_and_kinesthetic_learning.md)\r\n  * [Akka.NET, Actor Model and the Reactive Manifesto](/perspectives/WTFSIN_1/akka_and_the_reactive_manifesto.md)\r\n  * [Other Learning Projects](/perspectives/WTFSIN_1/other_learning_projects.md)\r\n  * [Coda - Microsoft, The Enterprise \u0026 The Open Source Balancing Act](/perspectives/WTFSIN_1/coda_open_source_balancing_act.md)",
    "lastmodified": "2023-08-21T19:54:58.7619328-04:00",
    "tags": []
  },
  "/perspectives/WTFSIN_1/other_learning_projects": {
    "title": "Other Learning Projects",
    "content": "\r\n## Other Learning Projects\r\n\r\nAside from the exercises, kata, koan and other assorted bits and bytes, I'm also building a few of my own little projects to help sharpen my F# chops. My first foray was an Azure Function app that takes a URL and retrieves openGraph data from the targeted web page. There's also the [Fauxlemetry](https://github.com/houstonhaynes/Fauxlemetry) CLI project, which is a small applet I use to generate large sets of production-scaled event data.\r\n\r\nI'm also learning how to use [Snowflaqe](https://github.com/Zaid-Ajaj/Snowflaqe), a meta-programming project from Zaid Ajaj. It's a fascinating microcosm into one of F#'s real super-powers - that it can be used to generate new, canonical code - so ***meta!*** I used it to generate a client that scraped GitHub's public GraphQL schema which then formed the structured types for a client interface library. The Types.fs file generated more than 3500 lines of error-free code that I would never have to look at other than to satisfy my curiosity. It's like magic. My goal was relatively mundane by comparison - to collect repository data, chart the relative growth of functional-friendly languages relative to other programming styles over the past 10 years. It's still in early stages but I'm hoping to complete the project end-to-end in F#/.NET and resist falling back to R.\r\n\r\nBut that's just the start. Right now the challenge is to maintain the core lessons (and the hardware project above) while not getting too distracted by the \"new shiny\" idea that pops into my head. It's the kind of problem I love to have.\r\n\r\n## The Future is Functional\r\n\r\nMy vision of a path forward with F# is taking shape. Fable, Xamarin, Meadow, C#/.NET interop face *out* while Akka.NET, Kubernetes and Event Store provide the base for a reactive platform that's fast, flexible, resilient and maintainable. The clarity of this sits in stark contrast to those lessons in my career where poor early choices and tech fragmentation were a project's undoing. \r\n\r\n\r\n![fsharp_ecosystem.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1659494196785/FTMS8vqPc.png align=\"left\")\r\n\r\nAnd the objective should not *only* be improved user experience or reduced burn rate but also a more sustainable operational framework. We as an industry must look beyond cost considerations to sustainability and reduction of carbon footprint. Bringing these intelligent tools together gives me a renewed sense that it's not only *possible* to create a solution greater than the sum of its parts, but that its inherent efficiency is also a more *responsible* approach. And so, the work continues...\r\n\r\n* [What The F# is Next (original)](/perspectives/WTFSIN_1)\r\n  * [Warehouse Full of Cannibals](/perspectives/WTFSIN_1/warehouse_full_of_cannibals.md)\r\n  * [The Wrong Kind of DDD](/perspectives/WTFSIN_1/the_wrong_kind_of_DDD.md)\r\n  * [A More Functional Approach](/perspectives/WTFSIN_1/a_more_functional_approach.md)\r\n  * [Machine Learning](/perspectives/WTFSIN_1/machine_learning.md)\r\n  * [Success and Kinesthetic Learning](/perspectives/WTFSIN_1/success_and_kinesthetic_learning.md)\r\n  * [Akka.NET, Actor Model and the Reactive Manifesto](/perspectives/WTFSIN_1/akka_and_the_reactive_manifesto.md)\r\n  * Other Learning Projects\r\n  * [Coda - Microsoft, The Enterprise \u0026 The Open Source Balancing Act](/perspectives/WTFSIN_1/coda_open_source_balancing_act.md)",
    "lastmodified": "2023-08-21T19:54:58.762548-04:00",
    "tags": []
  },
  "/perspectives/WTFSIN_1/success_and_kinesthetic_learning": {
    "title": "Success and Kinesthetic Learning",
    "content": "\r\n## An Overnight Success Twenty Years in the Making\r\n\r\nI really enjoyed watching these interviews with Don Syme, for the context as well as candor and humor he brings to the conversation. But I also liked the structure of the interview, where background info was displayed to \"season\" the screen as Don responded to questions.\r\n\r\n%[https://www.youtube.com/watch?v=hNAb04V4liA]\r\n\r\n%[https://www.youtube.com/watch?v=x4j7LQApfEY]\r\n\r\nIt shows that F# may seem like a newcomer to certain fields, but that has more to do with *where* it can be deployed and the underpinnings supported by the .NET ecosystem more than F# itself. With .NET 6 Long Term Support and new tooling like .NET interactive, F# will compare favorably with a wide variety of general purpose and domain specific languages, and with that I expect adoption will increase across the board.\r\n\r\n## Kinesthetic Learning\r\n\r\nThere's no substitute for learning while doing. But I'm also a reader. So I set up a large music stand in my home office with several books perched on it which I've started to refer as my \"F# bookshelf\". I'm currently working through Isaac Abraham's \"Get Programming with F#\" but I will thumb through others for reference and to occasionally provide a view into what's down the road. But the real work is sitting with the lessons and samples side-by-side in a working environment.\r\n\r\n* [Get Programming with F#](https://www.manning.com/books/get-programming-with-f-sharp) by Issac Abraham\r\n\r\n* [Machine Learning Projects for .NET Developers](https://www.apress.com/gp/book/9781430267676) by Matthais Brandewinder\r\n\r\n* [Expert F# 4.0](https://www.apress.com/gp/book/9781484207413) by Don Syme, et al\r\n\r\n* [Stylish F#](https://www.apress.com/gp/book/9781484239995) by Kit Eason\r\n\r\n* [Domain Modeling Made Functional](https://pragprog.com/titles/swdddf/domain-modeling-made-functional/) by Scott Wlaschin\r\n\r\n\r\n![music-stand.jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1659493306327/pH5JrH__a.jpg align=\"left\")\r\n\r\n### Online Resources\r\n\r\nBooks often come with downloadable companion code - but there are also many free and paid online resources that facilitate the curious programmer's journey.\r\n\r\n* [F# From the Ground Up](https://www.udemy.com/course/fsharp-from-the-ground-up/) (Kit Eason [Udemy paid courseware - highly recommended])\r\n* [F# for Fun and Profit](https://fsharpforfunandprofit.com/) (Scott Wlaschin's site)\r\n* [Compositional IT News \u0026 Blog](https://www.compositional-it.com/news-blog/) (company founded by Isaac Abraham)\r\n* [Learning F#](https://fsharp.org/learn/) (F# Foundation's compendium)\r\n* [Functional koans in F#](https://github.com/ChrisMarinos/FSharpKoans\") (Chris Marinos on GitHub)\r\n\r\nThere are many standard-bearers for F#, and they offer long-standing and substantial bodies of work to help software engineers approach regardless of their technical background.\r\n\r\n* [What The F# is Next (original)](/perspectives/WTFSIN_1)\r\n  * [Warehouse Full of Cannibals](/perspectives/WTFSIN_1/warehouse_full_of_cannibals.md)\r\n  * [The Wrong Kind of DDD](/perspectives/WTFSIN_1/the_wrong_kind_of_DDD.md)\r\n  * [A More Functional Approach](/perspectives/WTFSIN_1/a_more_functional_approach.md)\r\n  * [Machine Learning](/perspectives/WTFSIN_1/machine_learning.md)\r\n  * Success and Kinesthetic Learning\r\n  * [Akka.NET, Actor Model and the Reactive Manifesto](/perspectives/WTFSIN_1/akka_and_the_reactive_manifesto.md)\r\n  * [Other Learning Projects](/perspectives/WTFSIN_1/other_learning_projects.md)\r\n  * [Coda - Microsoft, The Enterprise \u0026 The Open Source Balancing Act](/perspectives/WTFSIN_1/coda_open_source_balancing_act.md)",
    "lastmodified": "2023-08-21T19:54:58.7630554-04:00",
    "tags": []
  },
  "/perspectives/WTFSIN_1/the_wrong_kind_of_DDD": {
    "title": "The Wrong Kind of DDD",
    "content": "\r\nBut the road to this realization was full of detours. While event sourcing and event-driven systems are often associated with domain driven design (DDD) the next decade or so of my career was subsumed with another DDD - ***database* driven development**. I spent some time with IBM Global Services and managing their partner e-commerce DBs around the globe. And that actually had some event sourcing functions as we were correcting and re-loading data in preparation for Y2K. But when I went to Siebel Systems we built out a lab with more than a dozen application and database based systems to simulate various workloads. That was when DBAs - database *architects* ruled the world. Because databases were often the greatest concentration of compute and storage (and therefore expense) it tended to also be the place where business logic would reside. And as anyone who's led a \"digital transformation\" project will tell you the industry is still living with that legacy imbalance in enterprise n-tier systems to this day.\r\n\r\n## You're Projecting\r\n\r\nFast forward to my first Microsoft Gold Partner assignment, a state level court system data warehousing project. They wanted to have a complete history for all court documents, but the old source system didn't record deletes. Well - to be specific they ***actually removed records*** instead of simply marking them with a 'deleted' indicator in the table. This was a vestige of the *precious* mentality of limited storage and compute available in databases from a bygone era. There had been plenty of opportunities to fix that *omission by subtraction*, but no one went to the trouble to do so in the intervening years. So they assumed that it could be magically *fixed* in the new data warehouse as though the information could be generated out of thin air. I eventually found a hybrid solution which could create a differential from monthly backups, loaded as snapshots for comparison. The re-built record delete indicators were only accurate to the end of the month in which they were deleted, but it was better than nothing. The process was tremendously time-consuming and very expensive, but as I've found over the years most analytics systems are the \"later\" choice of most *\"pay now or pay later\"* decision-making processes.\r\n\r\n%[https://www.youtube.com/watch?v=I3uH3iiiDqY\u0026t=355s]\r\n\r\nWhat I found since that time is that most \"digital transformation\" analytics projects are in-effect forensically reconstructing event sourcing from legacy operational systems, so that it could *then be **re-projected** into an analytic work product*. I make a passing reference to the inherent fallacy of \"digital transformation\" in my post about [agile patterns and practices](https://h3tech.io/how-agile-jumped-the-shark-into-a-zombie-apocalypse) and this is another facet of the same argument. Here again Greg Young articulates the problem space succinctly.\r\n\r\n%[https://www.youtube.com/watch?v=I3uH3iiiDqY\u0026t=3174s]\r\n\r\nI don't want this article to preach the gospel of all things event sourced. There are plenty of those around the web. But it struck me that the folks who build event based systems and the folks who are consumed by byzantine analytics re-platforming ***never talk to each other*** because they're both busy solving similar problems, albeit for different reasons. So while Greg's keynote presentation was certainly educational on its own merits - it's also a message in a bottle to folks drowning in technical debt created by others (as I was) when trying to extract analytic value out of legacy operational systems that are fundamentally ill-suited to their task.\r\n\r\nToward the end of my tenure as a Microsoft Gold Partner consultant I had lunch with an exec that was trying to convince me to stay on a project. My argument was that \"digital transformation\" was a double lie, because it wasn't transforming *anything* - and was also a lie of omission because we were failing a duty to inform that client of the costs of maintaining the burden of that technical debt. I referred to it as \"affirmative corporate gaslighting\", a form of positive toxicity. His answer? It's not so much a lie as a fact that needs ample opportunity to become true. It was said with a wry smile and I laughed at the joke, but it definitely was a signal that I was in the wrong part of the technology business.\r\n\r\n* [What The F# is Next (original)](/perspectives/WTFSIN_1)\r\n  * [Warehouse Full of Cannibals](/perspectives/WTFSIN_1/warehouse_full_of_cannibals.md)\r\n  * The Wrong Kind of DDD\r\n  * [A More Functional Approach](/perspectives/WTFSIN_1/a_more_functional_approach.md)\r\n  * [Machine Learning](/perspectives/WTFSIN_1/machine_learning.md)\r\n  * [Success and Kinesthetic Learning](/perspectives/WTFSIN_1/success_and_kinesthetic_learning.md)\r\n  * [Akka.NET, Actor Model and the Reactive Manifesto](/perspectives/WTFSIN_1/akka_and_the_reactive_manifesto.md)\r\n  * [Other Learning Projects](/perspectives/WTFSIN_1/other_learning_projects.md)\r\n  * [Coda - Microsoft, The Enterprise \u0026 The Open Source Balancing Act](/perspectives/WTFSIN_1/coda_open_source_balancing_act.md)",
    "lastmodified": "2023-08-21T19:54:58.764696-04:00",
    "tags": []
  },
  "/perspectives/WTFSIN_1/warehouse_full_of_cannibals": {
    "title": "Warehouse Full of Cannibals",
    "content": "\r\nI've written about my first software project outside of school building a warehouse management system for a small company that build physical products. We were building electronic musical instruments \"from a cold start\" as well as doing refurbishments of vintage electronic music gear. But we were staffing up and had grown beyond the ability for Bob (and myself, ostensibly) to go around with all of the parts and component information as a function of collective memory. The challenge was that with *so many* parts sources - including stripping operational parts out of otherwise-broken systems - meant tracking how much of something we *could* build was a major concern. Most of our work was standard off-the-shelf components but there was *just enough* of the boutique part tracing that it really required its own solution.\r\n\r\n![Houston, Bob and Dave (Houston's first hire) - 1995](https://cdn.hashnode.com/res/hashnode/image/upload/v1659492388927/_02Au2kT7.jpg align=\"left\")\r\n\r\nWe not only had to track the parts we ordered from suppliers, but we also had to calibrate for raw materials and lead time required to fabricate some of our own parts built in-house. And all of this was before we had to start cannibalizing out of a smorgasbord of defunct instruments sitting on the back shelves of the warehouse. In many ways it was a logistics nightmare, but the silver lining is that it was built to eventually include *some* predictive capabilities. Little did I know that it would be the kind of problem I'd be solving over and again for the next few decades.\r\n\r\n## The Big Event \u0026 The Bigger Picture\r\n\r\nInventory management seems pretty mundane - and if you're lucky, it is. *But almost **no one** is so lucky*. There's the many-to-many relationships that emerge: multiple suppliers that can provide the same part, cost versus lead time considerations, it all factors in. And at that time there was no easy online search to find supplier part counts and delivery lead times. You had to get folks on the phone, which takes time and patience. And this system was as much about providing visibility into what's \"out there\" as what we had on hand. The good news is that once the information was \"in the system\" then a generalist - an office manager or other line worker - can do a lookup and have a meaningful conversation with nearly anyone in the supply chain. Up to that point, it was either Bob or myself that had to spend time \"on the horn\" and creating a fan-out for that group of tasks was a pretty sizable force multiplier.\r\n\r\nIt started with an accounting template, part of what Microsoft's Access plus Visual Basic offering. As I mentioned in my early years with Moog, his son worked at Microsoft and he sent us a beta of the product, and it shaped really well to our problem space. I expanded it in *two* directions - as mentioned we kept notes on sources for off-the-shelf parts, and I *also* built tables for various custom circuit boards and parts we assembled in the shop with the full *bill of materials* (BOM) that each would consume. The \"fun\" part was coding an optimizer that could give us a view into how many boards we could build before running out of certain key components. So instead of a surprise when looking into a nearly empty bin, we could run checks before setting up for an assembly run to see what we'd need to resupply ahead of time. And beyond the \"0 checks\" we also used it to show the \"shape\" that the bins we would be afterward, and provide a view into what we'd need to order to replenish stock before the next run. We had been burned enough times that the investment in a bespoke-ish system was certainly worth the effort. And once we had gotten the primitives in place, the portions that provided the higher level view was an easy add-on.\r\n\r\n\u003e It struck me that the folks who build event based systems and the folks who are consumed by byzantine analytics re-platforming ***never talk to each other*** because they're both busy solving similar problems, albeit for different reasons.\r\n\r\nMy next job was as a developer for an accounting company that provided electronic tax filing software for CPAs. So that wasn't merely dancing around an accounting mindset - this *was* accounting with a twist. We *also* had to deal with a variety of filing regulations with each state, plus US federal tax codes. And there were specific guidelines on how to note a preparer's overrides and all of the amendments and indemnifications that came with it. As it turns out, this was an unexpected early lesson in the winding path my career has taken since then. Here's a 2016 keynote from Greg Young - the person [who originally coined the term 'CQRS' and founder of EventStore DB](https://www.eventstore.com/blog/event-sourcing-and-cqrs), who sums up the event sourced landscape in this brief excerpt.\r\n\r\n%[https://www.youtube.com/watch?v=I3uH3iiiDqY\u0026t=355s]\r\n\r\n* [What The F# is Next (original)](/perspectives/WTFSIN_1)\r\n  * Warehouse Full of Cannibals\r\n  * [The Wrong Kind of DDD](/perspectives/WTFSIN_1/the_wrong_kind_of_DDD.md)\r\n  * [A More Functional Approach](/perspectives/WTFSIN_1/a_more_functional_approach.md)\r\n  * [Machine Learning](/perspectives/WTFSIN_1/machine_learning.md)\r\n  * [Success and Kinesthetic Learning](/perspectives/WTFSIN_1/success_and_kinesthetic_learning.md)\r\n  * [Akka.NET, Actor Model and the Reactive Manifesto](/perspectives/WTFSIN_1/akka_and_the_reactive_manifesto.md)\r\n  * [Other Learning Projects](/perspectives/WTFSIN_1/other_learning_projects.md)\r\n  * [Coda - Microsoft, The Enterprise \u0026 The Open Source Balancing Act](/perspectives/WTFSIN_1/coda_open_source_balancing_act.md)",
    "lastmodified": "2023-08-21T19:54:58.764696-04:00",
    "tags": []
  },
  "/perspectives/WTFSIN_2/": {
    "title": "What the F# is Next? (pt deux)",
    "content": "\r\n# this is test\r\n\r\n[testing](/perspectives/WTFSIN_1)",
    "lastmodified": "2023-08-21T22:28:16.1491536-04:00",
    "tags": []
  },
  "/projects/": {
    "title": "Projects",
    "content": "",
    "lastmodified": "2023-08-20T18:24:57.1072308-04:00",
    "tags": []
  },
  "/projects/CO2-Sensor/": {
    "title": "CO2 Sensor",
    "content": "\r\n# CO2 Sensor",
    "lastmodified": "2023-08-20T18:24:57.1047155-04:00",
    "tags": []
  },
  "/projects/Fauxlemetry/": {
    "title": "Fauxlemetry",
    "content": "\r\n# Fauxlemetry",
    "lastmodified": "2023-08-20T18:24:57.1047155-04:00",
    "tags": []
  },
  "/projects/Solar-Tracker/": {
    "title": "Solar Tracker",
    "content": "\r\n# Solar Tracker",
    "lastmodified": "2023-08-20T18:24:57.1062229-04:00",
    "tags": []
  },
  "/sidebars/": {
    "title": "Sidebars",
    "content": "",
    "lastmodified": "2023-08-21T16:42:34.1952851-04:00",
    "tags": []
  },
  "/sidebars/Map_vs_map": {
    "title": "Map vs map",
    "content": "This was one of the first things that *initially* confused me about F#. When I looked at 'map' I thought to myself \"oh, this is like R\" which was one of the languages I was using for machine learning projects. I had also encountered the \"map\" operation in Scala and Python, though they work differently in each language (see the following sub-heading below). But as soon as I saw capitalized \"M\" *'Map'* in F# I was a bit confused. \r\n\r\n## Map is a special type of collection\r\n\r\nPretty quickly I figured out that \"Map\" is like a dictionary in C#, an ordered collection of key-value pairs. Here's a brief example of a Map in F#.\r\n\r\n```fsharp {title=\"F# Map creation and value access\", linenos=false}\r\nlet myMap = Map.ofList [ (\"apple\", 1); (\"banana\", 2) ]\r\nlet value = myMap[\"apple\"]  // value will be 1\r\n```\r\n\r\nThis is a list of key-value tuples which create the Map. And while R doesn't have a specific \"Map\" construct, it *does* have the concept of a 'named list', which operates in much the same fashion.\r\n\r\n```r {title=\"R named list creation and value access\", linenos=false}\r\ndict \u003c- list(apple = 1, banana = 2)\r\ndict$apple  # Accesses the value 1\r\n```\r\n\r\nThis may wander into the deeper 'R' waters of hash map creation which is out of scope here. But from the 'dict' abbreviation it could be surmised that named lists are often referred to as 'dictionaries'. Those happen to exist in C# as a core collection type.\r\n\r\n```csharp {title=\"C# Dictionary creation and value access\", linenos=false}\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\npublic class MyDictionaryClass\r\n{\r\n    private Dictionary\u003cstring, int\u003e MyDict { get; }\r\n\r\n    public MyDictionaryClass()\r\n    {\r\n        MyDict = new Dictionary\u003cstring, int\u003e\r\n        {\r\n            { \"apple\", 1 },\r\n            { \"banana\", 2 }\r\n        };\r\n    }\r\n\r\n    public int? GetValueByKey(string key)\r\n    {\r\n        if (MyDict.TryGetValue(key, out int value))\r\n        {\r\n            return value;\r\n        }\r\n        else\r\n        {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nMyDictionaryClass myDictClass = new MyDictionaryClass();\r\nint? value = myDictClass.GetValueByKey(\"apple\"); // Should return 1\r\nint? nonExistentValue = myDictClass.GetValueByKey(\"orange\"); // Should return null\r\n```\r\n\r\nOnce I had this sorted out things quickly fell into place.\r\n\r\n## Lower case 'm' map as an operation in F#\r\n\r\nThis is considered a higher-order function in F# and is part of the standard library. It applies a given function to each item in a list (or other 'mappable' collection), and returns a new collection containing the results. So the 'higher order' bit is about how map takes whatever function you pass to it so that the map operation can process each value in the collection through that function to render a new value.\r\n\r\n```fsharp {title=\"F# map operation over a list of integers\", linenos=false}\r\n[1; 2; 3; 4; 5] |\u003e List.map (fun n -\u003e n * n)\r\n\r\n(* returns a new list of [1; 4; 9; 16; 25] *)\r\n```\r\n\r\nAs a side note, the Python version of map is less used (as list comprehensions often replace it) the Scala implementation of 'map' is substantially similar to [the F# approach.](https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-mapmodule.html) Both Scala and Python, however, are used for applying a function to each element in a collection and generating a new collection based on the results.\r\n\r\nWhile there's no 'map' in the core C# language, it offers something similar in the LINQ library with the 'Select' method.\r\n\r\n```csharp {title=\"C# operation over a list of individual values\", linenos=false}\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\npublic class NumberOperations\r\n{\r\n    private int[] numbers;\r\n\r\n    public NumberOperations(int[] numbers)\r\n    {\r\n        this.numbers = numbers;\r\n    }\r\n\r\n    public List\u003cint\u003e GetSquaredNumbers()\r\n    {\r\n        return numbers.Select(x =\u003e x * x).ToList();\r\n    }\r\n}\r\n\r\nNumberOperations numOps = new NumberOperations(new int[] { 1, 2, 3, 4, 5 });\r\nList\u003cint\u003e squaredNumbers = numOps.GetSquaredNumbers(); \r\n// Should return a list containing [1, 4, 9, 16, 25]\r\n\r\n```\r\n\r\n## Less is More\r\n\r\nOne aspect that continues to surface with F# is its brevity - both its incredibly strong type inference and 'functional first' posture makes for very succinct code. Here, in this case, the **moment** of confusion led to a really expansive view of how well organized the F# language has been for nearly 20 years. Once you start looking at comparisons to other languages the relatively *low* cognitive burden of F# becomes one of its major advantages.\r\n",
    "lastmodified": "2023-08-21T11:44:15.520508-04:00",
    "tags": [
      "fundamentals"
    ]
  },
  "/site_tweaks/": {
    "title": "Site Tweaks",
    "content": "",
    "lastmodified": "2023-08-20T18:24:57.1092329-04:00",
    "tags": []
  },
  "/technologies/": {
    "title": "Technologies",
    "content": "",
    "lastmodified": "2023-08-20T18:24:57.1152294-04:00",
    "tags": []
  },
  "/technologies/Avalonia/": {
    "title": "Avalonia (XPlat)",
    "content": "",
    "lastmodified": "2023-08-20T18:24:57.1112369-04:00",
    "tags": [
      "Projects"
    ]
  },
  "/technologies/Avalonia/Elmish.Avalonia": {
    "title": "Elmish.Avalonia",
    "content": "\r\n# Elmish.Avalonia",
    "lastmodified": "2023-08-20T18:24:57.110231-04:00",
    "tags": [
      "Projects"
    ]
  },
  "/technologies/Critter_Stack/": {
    "title": "The Critter Stack",
    "content": "",
    "lastmodified": "2023-08-20T18:24:57.1112369-04:00",
    "tags": [
      "Projects"
    ]
  },
  "/technologies/OpenFaas/": {
    "title": "OpenFaaS (serverless)",
    "content": "",
    "lastmodified": "2023-08-20T18:24:57.1132321-04:00",
    "tags": [
      "Projects"
    ]
  },
  "/technologies/OpenFaas/OpenFaaS_Giraffe": {
    "title": "OpenFaaS \u0026 Giraffe",
    "content": "\r\n# OpenFaaS\r\n\r\n# Giraffe",
    "lastmodified": "2023-08-20T18:24:57.1122336-04:00",
    "tags": [
      "Projects"
    ]
  },
  "/technologies/WildernessLabs/": {
    "title": "Wilderness Labs (IoT)",
    "content": "",
    "lastmodified": "2023-08-20T18:24:57.1142322-04:00",
    "tags": [
      "Projects"
    ]
  },
  "/technologies/WildernessLabs/CO2_sensor": {
    "title": "CO2 Sensor",
    "content": "\r\n# WildernessLabs",
    "lastmodified": "2023-08-20T18:24:57.1142322-04:00",
    "tags": [
      "Projects"
    ]
  },
  "/zettelkasten/": {
    "title": "Zettelkasten",
    "content": "",
    "lastmodified": "2023-08-20T18:24:57.1172404-04:00",
    "tags": []
  },
  "/zettelkasten/Rot13": {
    "title": "ROT13 Algorithm",
    "content": "## A gentle introduction to algorithms in F#\r\n\r\nThe 'ROT13' algorithm is an introductory lesson in obfuscation that 'rotates' the alphabet by 13 positions (half of the full length of 26 characters) to create a new, harder-to-read result. It serves as an initial model for those that are new to cryptography to work out through inductive reasoning. \r\n\r\n```fsharp {title=\"F# sample showing ROT13 character rotation\"}\r\nopen System.Text\r\n\r\nlet rotChar (c:char) offset = int c + offset |\u003e char\r\n\r\nlet rot13 (str:string) =\r\n    let rec rot (str:char list) (sb:StringBuilder) =\r\n        match str with\r\n        | [] -\u003e sb.ToString()\r\n        | c::cs -\u003e match int c with\r\n                   | cCode when (cCode \u003e 77 \u0026\u0026 cCode \u003c= 90) || (cCode \u003e 109 \u0026\u0026 cCode \u003c= 122) -\u003e rot cs (rotChar c -13 |\u003e sb.Append)\r\n                   | _ -\u003e rot cs (rotChar c 13 |\u003e sb.Append)\r\n        \r\n    rot (str.ToCharArray() |\u003e List.ofArray) (StringBuilder())\r\n\r\n\r\n(* Calling the function to evaluate rot13 algorithm *)\r\n\r\nprintfn \"%s\" (rot13 \"zlatan\")\r\n\r\n(* returns \"myngna\" *)\r\n\r\n```\r\n\r\nWhile this is *simple* in terms of algortithmic processing, this example also shows how recursive processing is structured in F#. \r\n\r\n[Source](https://github.com/AllAlgorithms/fsharp/blob/master/algorithms/ciphers/rot13.fsx)\r\n",
    "lastmodified": "2023-08-20T18:24:57.1172404-04:00",
    "tags": [
      "fundamentals",
      "recursion"
    ]
  }
}